<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[my soul my beats]]></title>
  <subtitle><![CDATA[此刻恰逢]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mzeht.com/"/>
  <updated>2016-02-06T16:47:54.000Z</updated>
  <id>http://mzeht.com/</id>
  
  <author>
    <name><![CDATA[mzeht]]></name>
    <email><![CDATA[mzeht@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gradle User Guide]]></title>
    <link href="http://mzeht.com/2016/02/06/Gradle-User-Guide/"/>
    <id>http://mzeht.com/2016/02/06/Gradle-User-Guide/</id>
    <published>2016-02-06T15:19:45.000Z</published>
    <updated>2016-02-06T16:47:54.000Z</updated>
    <content type="html"><![CDATA[<p>参考资料：gradle 2.10 官方文档<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/userguide.html</a></p>
<p>Gradle User Guide<br>Version 2.10</p>
<p>Copyright © 2007-2015 Hans Dockter, Adam Murdoch<br>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p>
<h1 id="第一章：关于gradle">第一章：关于gradle</h1><h2 id="介绍">介绍</h2><p>很高兴能向大家介绍 Gradle, 这是一个构建系统, 我们认为它是 java ( JVM ) 世界中构建技术的一个飞跃.<br>Gradle 提供了:</p>
<ul>
<li>一个像 Ant 一样的非常灵活的通用构建工具</li>
<li>一种可切换的, 像 maven 一样的基于合约构建的框架</li>
<li>支持强大的多工程构建</li>
<li>支持强大的依赖管理(基于 ApacheIvy )</li>
<li>很好的支持你已有的 maven 和 ivy 仓库</li>
<li>支持传递性依赖管理, 而不需要远程仓库或者 pom.xml 或者 ivy 配置文件</li>
<li>优先支持 Ant 式的任务和构建</li>
<li>基于 <code>groovy</code> 的构建脚本</li>
<li>有丰富的领域模型来描述你的构建</li>
</ul>
<h3 id="1-1-_关于用户指南">1.1. 关于用户指南</h3><p>这份用户指南，就像Gradle自身一样，还在积极的发展之中，Gradle的一些功能没有被完全展示出来，现在的一些内容也不是很清晰，如果你更加了解Gradle，我们需要你的帮助来完善Gradle文档，你可以在<a href="http://www.gradle.org/contribute" target="_blank" rel="external">Gradle Web Site</a>了解如何为文档贡献力量</p>
<p>通过这本指南, 你将会看到一些代表 Gradle 任务之间依赖关系的图表. 类似于 UML 依赖关系<br>的表示方法, 从一个任务 A 指向另一个任务 B 的箭头代表A依赖于B.</p>
<h2 id="概述">概述</h2><h3 id="2-1-_特点">2.1. 特点</h3><ol>
<li><p><code>声明式构建和合约构建</code><br>Gradle 的核心是基于 Groovy 的 领域特定语言 (DSL), 具有十分优秀的扩展性. Gradle 通过提<br>供可以随意集成的声明式语言元素将声明性构建推到了一个新的高度. 这些元素也为 Java,<br>Groovy, OSGi, Web 和Scala 等项目提供基于合约构建的支持. 而且, 这种声明式语言是可扩展<br>的. 你可以添加自己的语言元素或加强现有的语言元素, 从而提供简洁, 易于维护和易于理解的<br>构建.</p>
</li>
<li><p><code>基于依赖的编程语言</code>声明式语言位于通用任务图 ( general purpose task graph ) 的顶端，它可以被充分利用在你<br>的构建中. 它具有强大的灵活性, 可以满足使用者对 Gradle 的一些特别的需求.</p>
</li>
<li><code>让构建结构化</code><br>Gradle 的易适应性和丰富性可让你在构建里直接套用通用的设计原则. 例如, 你可以非常容易<br>地使用一些可重用的组件来构成你的构建. 但是不必要的间接内联内容是不合适的. 不要强行<br>拆分已经结合在一起的部分 (例如, 在你的项目层次结构中). 避免使构建难以维护. 总之, 你可<br>以创建一个结构良好，易于维护和易于理解的构建.</li>
<li><code>API深化</code><br>你会非常乐意在整个构建执行的生命周期中使用 Gradle, 因为Gradle 允许你管理和定制它的<br>配置和执行行为.</li>
<li><code>Gradle 扩展</code><br>Gradle 扩展得非常好. 不管是简单的独立项目还是大型的多项目构建, 它都能显著的提高效率.<br>这是真正的结构构建. 顶尖水平的构建功能，还可以解决许多大公司碰到的构建 性能低下的问<br>题.</li>
<li><code>多项目构建</code><br>Gradle 对多项目的支持是非常出色的. 项目依赖是很重要的部分. 它允许你模拟在多项目构建<br>中项目的关系，这正是你所要关注的地方. Gradle 遵从你的布局, 反过来就不是.<br>Gradle 提供了局部构建的功能. 如果你构建一个单独的子项目, Gradle 会构建这个子项目依赖<br>的所有子项目. 你也可以选择依赖于另一个特别的子项目重新构建这些子项目. 这样在一些大<br>型项目里就可以节省非常多的时间.</li>
<li><code>多种方式来管理你的依赖</code><br>不同的团队有不同的管理外部依赖的方法. Gradle 对于任何管理策略都提供了合适的支持. 从<br>远程 Maven 和 Ivy 库的依赖管理到本地文件系统的 jars 或者 dirs.</li>
<li><code>Gradle 是第一个构建整合工具</code><br>Ant 的 tasks是 Gradle 中很重要的部分, 更有趣是 Ant 的 projects 也是十分重要的部分.<br>Gradle 可以直接引入Ant 项目, 并在运行时直接将 Ant targets 转换成 Gradle tasks. 你可以从<br>Gradle 中依赖它们, 并增强它们的功能, 甚至可以在 build.xml 文件中声明 Gradle tasks 的依<br>赖. 并且properties, paths 等也可以通过同样的方法集成进来.<br>Gradle 完全支持你已有的 Maven 或者 lvy 仓库来构造发布或者提取依赖. Gradle 也提供了一<br>个转化器, 用来将 maven 的 pom.xml 文件转换成 Gradle 脚本. 在运行时引入 Maven 项目也<br>会在稍后推出.</li>
<li><code>易于迁移</code><br>Gradle 可以兼容任何结构. 因此你可以直接在你的产品构建的分支上开发你的 Gradle 构建,<br>并且二者可以并行. 我们通常建议编写一些测试代码来确保它们的功能是相同的. 通过这种方<br>式, 在迁移的时候就不会显得那么混乱和不可靠, 这是通过婴儿学步的方式来获得最佳的实践.</li>
<li><code>Groovy</code><br>Gradle 的构建脚本是通过 Groovy 编写的而不是 XML. 但是并不像其他方式, 这并不是为了简<br>单的展示用动态语言编写的原始脚本有多么强大. 不然的话, 只会导致维护构建变得非常困难.<br>Gradle 的整个设计是朝着一种语言的方向开发的, 并不是一种死板的框架. Groovy 就像胶水一<br>样, 把你像实现的构想和抽象的 Gradle 粘在一起. Gradle提供了一些标准的构想, 但是他们并<br>不享有任何形式的特权. 相比于其他声明式构建系统，对我们来说这是一个比较突出的特点.</li>
<li><code>Gradle 包装器</code><br>Gradle 包装器允许你在没有安装 Gradle 的机器上运行 Gradle 构建. 在一些持续集成的服务<br>器上, 这个功能将非常有用. 它同样也能降低使用一个开源项目的门槛, 也就是说构建它将会非<br>常简单. 这个包装器对于公司来说也是很有吸引力的. 它并不需要为客户机提供相应的管理防<br>范. 这种方式同样也能强制某一个版本 Gradle 的使用从而最小化某些支持问题.</li>
<li><code>免费和开源</code><br>Gradle 是一个开源项目, 遵循 ASL 许可.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考资料：gradle 2.10 官方文档<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradl]]>
    </summary>
    
      <category term="Gradle" scheme="http://mzeht.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 2.0 Preview 9]]></title>
    <link href="http://mzeht.com/2016/02/02/Android-Studio-2-0-Preview-9/"/>
    <id>http://mzeht.com/2016/02/02/Android-Studio-2-0-Preview-9/</id>
    <published>2016-02-02T10:40:59.000Z</published>
    <updated>2016-02-02T10:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>一不注意android studio preview 2.0 又要升级了，升级到preview2.0 9版本</p>
<p>下载地址<a href="http://tools.android.com/download/studio/builds/2-0-preview-9" target="_blank" rel="external">http://tools.android.com/download/studio/builds/2-0-preview-9</a><br>这里有最新的版本更新消息<br>之前的preview 2.0 的确有不可忽视的bug </p>
<blockquote>
<p>We’ve just pushed Android Studio 2.0 Preview 9 to the canary channel — along with 2.0.0-alpha9 of the Gradle plugin to jcenter (and as part of the bundled offline repository within the IDE).</p>
<p>In this release, we’ve completely turned off in-memory dexing by default. We’ve spent the last couple of previews trying to fine-tune it, but there are lingering issues which continues to affect users. This should hopefully make the builds work a lot better for many of you. (If things were already working well, you can continue with in-memory dexing by turning it on with android.dexOptions.dexInProcess=true.)</p>
</blockquote>
<p> <strong>We’ve also continued to fix various Instant Run scenarios; in particular, using APK splits on API 23 seems to trigger some platform bugs, so for now we’ve switched over to using multidex for coldswap for both Lollipop and Marshmallow.</strong></p>
<p>没错，果然是bug，就是打包出问题,个人经历为生成的apk fragment资源管理混乱，主题资源编译出错，同样的打包方式，viewpage切换一个出错一个正常，过渡动画一个默认，一个自定义，导致我用回了1.5稳定版，不知道这个版本彻底解决没，从preview 9 开始 默认使用gradle2.10版本</p>
<p>gradle的android构建插件为<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.0.0-alpha6'</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一不注意android studio preview 2.0 又要升级了，升级到preview2.0 9版本</p>
<p>下载地址<a href="http://tools.android.com/download/studio/builds/2-0-preview-9"]]>
    </summary>
    
      <category term="AndroidStudio" scheme="http://mzeht.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NavigationView+TabLayout+Viewpage]]></title>
    <link href="http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/"/>
    <id>http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/</id>
    <published>2016-02-01T09:28:41.000Z</published>
    <updated>2016-02-02T09:36:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://github.com/mzeht/ZhiHuiYun" target="_blank" rel="external">https://github.com/mzeht/ZhiHuiYun</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="NavigationView" scheme="http://mzeht.com/tags/NavigationView/"/>
    
      <category term="TabLyout" scheme="http://mzeht.com/tags/TabLyout/"/>
    
      <category term="ViewPage" scheme="http://mzeht.com/tags/ViewPage/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SwipeRefreshLayoutBasic]]></title>
    <link href="http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/"/>
    <id>http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/</id>
    <published>2016-01-29T16:20:12.000Z</published>
    <updated>2016-02-02T09:21:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/sample.gif" alt="image"></p>
<p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/click.gif" alt="image"></p>
<p>SwipeRefreshLayout是google官方的刷新控件<br>Recyclerview则是未来取代listview，girdview等的新控件</p>
<p>.IDE android studio 1.5(2.o preview之前apk打包有bug，暂时不用了)</p>
<p>.Demo地址 <a href="https://github.com/mzeht/SwipeRefreshListDemo" target="_blank" rel="external">https://github.com/mzeht/SwipeRefreshListDemo</a> </p>
<h2 id="-MainActivity">.MainActivity</h2><p>activity_main.xml</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;android.support.design.widget.CoordinatorLayout
xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span>
xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span>
tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>&gt;

&lt;android.support.design.widget.AppBarLayout
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">theme=</span><span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;

    &lt;android.support.v7.widget.Toolbar
        android:<span class="variable">id=</span><span class="string">"@+id/toolbar"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"?attr/actionBarSize"</span>
        android:<span class="variable">background=</span><span class="string">"?attr/colorPrimary"</span>
        app:<span class="variable">popupTheme=</span><span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include <span class="variable">layout=</span><span class="string">"@layout/content_main"</span>/&gt;

&lt;android.support.design.widget.FloatingActionButton
    android:<span class="variable">id=</span><span class="string">"@+id/fab"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_gravity=</span><span class="string">"bottom|end"</span>
    android:<span class="variable">layout_margin=</span><span class="string">"@dimen/fab_margin"</span>
    android:<span class="variable">src=</span><span class="string">"@android:drawable/ic_dialog_email"</span>/&gt;

&lt;/android.support.design.widget.CoordinatorLayout&gt;
</code></pre><h2 id="-在其中的content_main-xml">.在其中的content_main.xml</h2><p>SwipeRefreshLayout 嵌套一个子元素 （如有多个，可用FrameLayout封装成一个）</p>
<pre><code>    &lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;RelativeLayout
        xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
    xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-    auto"</span>
    xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    app:<span class="variable">layout_behavior=</span><span class="string">"@string/    appbar_scrolling_view_behavior"</span>
    tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>
    tools:<span class="variable">showIn=</span><span class="string">"@layout/activity_main"</span>&gt;

&lt;android.support.v4.widget.SwipeRefreshLayout
    android:<span class="variable">id=</span><span class="string">"@+id/swiperefresh"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;android.support.v7.widget.RecyclerView
        android:<span class="variable">id=</span><span class="string">"@+id/recycler"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;/android.support.v7.widget.RecyclerView&gt;
&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre><h2 id="-RecyclerView的Item">.RecyclerView的Item</h2><p>*同经典的listviewItem，只是adapter略有区别</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;LinearLayout xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
          xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
          android:<span class="variable">orientation=</span><span class="string">"horizontal"</span>
          android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
          android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">id=</span><span class="string">"@+id/ll"</span>&gt;

&lt;ImageView
    android:<span class="variable">id=</span><span class="string">"@+id/image"</span>
    android:<span class="variable">src=</span><span class="string">"@mipmap/ic_launcher"</span>
    android:<span class="variable">padding=</span><span class="string">"5dp"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    /&gt;
&lt;TextView
    android:<span class="variable">id=</span><span class="string">"@+id/tv"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">textSize=</span><span class="string">"18sp"</span>
    android:<span class="variable">gravity=</span><span class="string">"center"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    tools:<span class="variable">text=</span><span class="string">"ss"</span>/&gt;

&lt;/LinearLayout&gt;
</code></pre><h2 id="-RecyclerView的分割线">.RecyclerView的分割线</h2><p>*RecyclerView 默认没有分割线，需要自定义一个，希望以后有默认可选，这里定义一个</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>{
<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = {android.R.attr.listDivider};
<span class="keyword">private</span> Drawable mDivider;
<span class="function"><span class="keyword">public</span> <span class="title">MyItemDecoration</span><span class="params">(Context context)</span>
</span>{
    TypedArray array = context.obtainStyledAttributes(ATTRS);
    <span class="comment">// 获取分隔条</span>
    mDivider = array.getDrawable(<span class="number">0</span>);
    array.recycle();
}
<span class="annotation">@Override</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span>
</span>{
    <span class="keyword">super</span>.onDrawOver(c, parent, state);
    <span class="keyword">int</span> count = parent.getChildCount();
    <span class="keyword">int</span> left = parent.getPaddingLeft();
    <span class="keyword">int</span> right = parent.getWidth()-parent.getPaddingRight();
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
    {
        View v = parent.getChildAt(i);
        RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) v.getLayoutParams();
        <span class="keyword">int</span> top = v.getBottom() + params.bottomMargin;
        <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();
        mDivider.setBounds(left,top,right,bottom);
        mDivider.draw(c);
    }
}

}
</code></pre><p>*MainActivity</p>
<pre><code>mRecyclerView= (RecyclerView) findViewById(R.id.recycler);
mRefreshlayout= (SwipeRefreshLayout) findViewById(R.id.swiperefresh);
mLinearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);
mAdapter = <span class="keyword">new</span> MainRecyclerAdapter(DataSource.generateData(<span class="number">20</span>),MainActivity.<span class="keyword">this</span>);
mRecyclerView.setAdapter(mAdapter);

<span class="comment">//每个item高度一致，可设置为true，提高性能</span>
mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);
mRecyclerView.setLayoutManager(mLinearLayoutManager);
<span class="comment">//分隔线</span>
mRecyclerView.addItemDecoration(<span class="keyword">new</span> MyItemDecoration(<span class="keyword">this</span>));
mRefreshlayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{

        <span class="keyword">new</span> UpdateTask().execute();

    }
});
</code></pre><p>   *开启异步任务模拟耗时操作</p>
<pre><code>   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AsyncTask&lt;Void</span>,<span class="title">Void</span>,<span class="title">List&lt;String&gt;&gt;</span>
</span>{
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; doInBackground(<span class="type">Void</span>... params)
    {
        <span class="keyword">try</span>
        {
            <span class="type">Thread</span>.sleep(<span class="number">2000</span>);
        } <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e)
        {
            e.printStackTrace();
        }
        <span class="type">List</span>&lt;<span class="type">String</span>&gt; strings = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();
        strings.add(<span class="string">"新数据1"</span>);
        strings.add(<span class="string">"新数据2"</span>);
        strings.add(<span class="string">"新数据3"</span>);
        strings.add(<span class="string">"新数据4"</span>);
        <span class="keyword">return</span> strings;
    }
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> void onPostExecute(<span class="type">List</span>&lt;<span class="type">String</span>&gt; strings)
    {
        mAdapter.addItems(strings);
        <span class="comment">//通知刷新完毕</span>
        mRefreshlayout.setRefreshing(<span class="literal">false</span>);
        <span class="comment">//滚动到列首部---&gt;这是一个很方便的api，可以滑动到指定位置</span>
        mRecyclerView.scrollToPosition(<span class="number">0</span>);
    }
}
</code></pre><h2 id="RecylerView的Item点击事件监听，内部各个子控件的监听">RecylerView的Item点击事件监听，内部各个子控件的监听</h2><pre><code>*在设计复杂listview 的时候，往往有Item点击事件和各个子控件的事件需要监听
*但是RecylerView没有提供OnItemOnclick的方法，需要我们自己去写
首先定义一个外部接口

```java

<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OnListClickListener</span> {

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View view,String data)</span></span>;


    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemTextClick</span><span class="params">(View view,String data)</span></span>;



    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemIconClick</span><span class="params">(View view ,String data)</span></span>;
}
</code></pre><p>*适配Adapter</p>
<p>public class MainRecyclerAdapter extends RecyclerView.Adapter<mainrecycleradapter.viewholder> {</mainrecycleradapter.viewholder></p>
<pre><code><span class="keyword">private</span> List&lt;String&gt; datas = <span class="keyword">null</span>;
<span class="keyword">private</span> OnListClickListener mListener;

<span class="function"><span class="keyword">public</span> <span class="title">MainRecyclerAdapter</span><span class="params">(List&lt;String&gt; datas,OnListClickListener l)</span>
</span>{
    <span class="keyword">this</span>.datas = datas;
    <span class="keyword">this</span>.mListener=l;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span>
</span>{
    <span class="keyword">final</span> View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item, parent, <span class="keyword">false</span>);
<span class="comment">//        itemView.setOnClickListener(new View.OnClickListener()</span>
<span class="comment">//        {</span>
<span class="comment">//            @Override</span>
<span class="comment">//            public void onClick(View v)</span>
<span class="comment">//            {</span>
<span class="comment">//                if(mListener != null)</span>
<span class="comment">//                {</span>
<span class="comment">//                    mListener.OnItemClick(v, (String) itemView.getTag());</span>
<span class="comment">//                }</span>
<span class="comment">//            }</span>
<span class="comment">//        });</span>
    ViewHolder viewHolder= <span class="keyword">new</span> ViewHolder(itemView);




    <span class="keyword">return</span> viewHolder;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span>
</span>{
    String s = datas.get(position);
    holder.bindData(s);
    holder.itemView.setTag(s);
    holder.mContent.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemTextClick(holder.mContent, (String) holder.itemView.getTag());
        }
    });

    holder.mImageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemIconClick(holder.mImageView, (String) holder.itemView.getTag());
        }
    });

    holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemClick(v, (String) holder.itemView.getTag());
        }
    });


}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span>
</span>{
    <span class="function"><span class="keyword">return</span> datas.<span class="title">size</span><span class="params">()</span></span>;
}
<span class="javadoc">/**
 * 批量增加
 * */</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;String&gt; items)</span>
</span>{
    <span class="keyword">if</span> (items == <span class="keyword">null</span>)
        <span class="keyword">return</span>;
    <span class="keyword">this</span>.datas.addAll(<span class="number">0</span>, items);
    <span class="keyword">this</span>.notifyItemRangeInserted(<span class="number">0</span>, items.size());
}

<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>
</span>{
    <span class="keyword">private</span> TextView mContent;
    <span class="keyword">private</span> ImageView mImageView;
    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span>
    </span>{
        <span class="keyword">super</span>(itemView);
        mContent = (TextView) itemView.findViewById(R.id.tv);
        mImageView= (ImageView) itemView.findViewById(R.id.image);
    }
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">bindData</span><span class="params">(String s)</span>
    </span>{
        <span class="keyword">if</span> (s != <span class="keyword">null</span>)
            mContent.setText(s);
    }

}
}
</code></pre><p>*通过对Item的根试图的监听，实现Item点击监听，不用设置最外层布局id，可以看出，Recyclerview强制对listview进行复用，对子控件的个性化定制在bind操作中进行，接口事件传递到Activity层，可以通过TAG传递数据，解耦合，如：</p>
<pre><code> @<span class="type">Override</span>
    public void <span class="type">OnItemClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="type">Item</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemTextClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">text</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemIconClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">icon</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRe]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://mzeht.com/2015/04/20/hello-world/"/>
    <id>http://mzeht.com/2015/04/20/hello-world/</id>
    <published>2015-04-19T17:05:05.000Z</published>
    <updated>2015-04-19T17:05:05.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="http://music.163.com/outchain/player?type=2&id=27671003&auto=0&height=66"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown 语法]]></title>
    <link href="http://mzeht.com/2015/03/10/2015-03-10-markdown/"/>
    <id>http://mzeht.com/2015/03/10/2015-03-10-markdown/</id>
    <published>2015-03-09T16:00:00.000Z</published>
    <updated>2015-04-01T16:09:54.000Z</updated>
    <content type="html"><![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span class="preprocessor">## Title2</span>
<span class="preprocessor">### Title3</span>
<span class="preprocessor">#### Title4</span>
<span class="preprocessor">##### Title5</span>
<span class="preprocessor">###### Title6</span>
</code></pre><p>效果：</p>
<h1 id="Title1">Title1</h1><h2 id="Title2">Title2</h2><h3 id="Title3">Title3</h3><h4 id="Title4">Title4</h4><h5 id="Title5">Title5</h5><h6 id="Title6">Title6</h6><h1 id="2-_引用">2. 引用</h1><p>代码：</p>
<pre><code><span class="blockquote">&gt; Reference1</span>
<span class="blockquote">&gt; &gt; Reference2</span>
<span class="blockquote">&gt; &gt; &gt; Reference3</span>
</code></pre><p>效果：</p>
<blockquote>
<p>Reference1</p>
<blockquote>
<p>Reference2</p>
<blockquote>
<p>Reference3</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="3-_列表">3. 列表</h1><p>代码：</p>
<pre><code><span class="bullet">+ </span>Row1
<span class="bullet">- </span>Row2
<span class="bullet">* </span>Row3
<span class="bullet">1. </span>Row4
<span class="bullet">2. </span>Row5
</code></pre><p>效果：</p>
<ul>
<li>Row1</li>
</ul>
<ul>
<li>Row2</li>
</ul>
<ul>
<li>Row3</li>
</ul>
<ol>
<li>Row4</li>
<li>Row5</li>
</ol>
<h1 id="4-_代码">4. 代码</h1><p>代码：</p>
<pre><code><span class="escape">`C</span>ode1<span class="escape">`
</span>
    Code2
</code></pre><p>效果：</p>
<p><code>Code1</code></p>
<pre><code>Code2
</code></pre><h1 id="5-_链接与图片">5. 链接与图片</h1><p>代码：</p>
<pre><code>[<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbs.weiphone.com "威锋网"</span>)

[<span class="link_label">WPER</span>][<span class="link_reference">ref</span>]
[<span class="link_reference">ref</span>]:<span class="link_url"> http://bbs.wper.com (威智网)</span>

![<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbsimages.weiphone.com/images/weiphone/logo.png "威锋论坛"</span>)

![<span class="link_label">WPER</span>][<span class="link_reference">pic</span>]
[<span class="link_reference">pic</span>]:<span class="link_url"> http://bbs.wper.com/static/image/wper/logo.png "威智网"</span>

<span class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://bbsimages.weiphone.com/images/weiphone/logo.png"</span> <span class="attribute">alt</span>=<span class="value">"BBS"</span> <span class="attribute">title</span>=<span class="value">"威锋网"</span> <span class="attribute">width</span>=<span class="value">"200"</span>/ &gt;</span></span>
</code></pre><p>效果：</p>
<p><a href="http://bbs.weiphone.com" title="威锋网" target="_blank" rel="external">WeiPhone</a></p>
<p><a href="http://bbs.wper.com" title="锋科技" target="_blank" rel="external">WPER</a></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋论坛"></p>
<p><img src="http://bbs.wper.com/static/image/wper/logo.png" alt="WPER" title="威智网"></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋网" width="200"></p>
<h1 id="6-_强调">6. 强调</h1><p>代码：</p>
<pre><code><span class="keyword">*</span>MarkDown<span class="keyword">*</span>
_MarkDown_
<span class="keyword">*</span><span class="keyword">*</span>MarkDown<span class="keyword">*</span><span class="keyword">*</span>
__MarkDown__
</code></pre><p>效果：</p>
<p><em>MarkDown</em><br><em>MarkDown</em><br><strong>MarkDown</strong><br><strong>MarkDown</strong></p>
<h1 id="7-_转义字符">7. 转义字符</h1><p>代码：</p>
<pre><code><span class="string">\\</span> <span class="string">\`</span> <span class="string">\*</span> <span class="string">\_</span> <span class="string">\{</span> <span class="string">\}</span> <span class="string">\[</span> <span class="string">\]</span> <span class="string">\(</span> <span class="string">\)</span> <span class="string">\#</span> <span class="string">\+</span> <span class="string">\-</span> <span class="string">\.</span> <span class="string">\!</span>
</code></pre><p>效果：</p>
<p>\ ` * _ { } [ ] ( ) # + - . !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span clas]]>
    </summary>
    
      <category term="markdown" scheme="http://mzeht.com/tags/markdown/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>