<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[my soul my beats]]></title>
  <subtitle><![CDATA[此刻恰逢]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mzeht.com/"/>
  <updated>2016-02-02T09:36:30.000Z</updated>
  <id>http://mzeht.com/</id>
  
  <author>
    <name><![CDATA[mzeht]]></name>
    <email><![CDATA[mzeht@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[NavigationView+TabLayout+Viewpage]]></title>
    <link href="http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/"/>
    <id>http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/</id>
    <published>2016-02-01T09:28:41.000Z</published>
    <updated>2016-02-02T09:36:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://github.com/mzeht/ZhiHuiYun" target="_blank" rel="external">https://github.com/mzeht/ZhiHuiYun</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="NavigationView" scheme="http://mzeht.com/tags/NavigationView/"/>
    
      <category term="TabLyout" scheme="http://mzeht.com/tags/TabLyout/"/>
    
      <category term="ViewPage" scheme="http://mzeht.com/tags/ViewPage/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SwipeRefreshLayoutBasic]]></title>
    <link href="http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/"/>
    <id>http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/</id>
    <published>2016-01-29T16:20:12.000Z</published>
    <updated>2016-02-02T09:21:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/sample.gif" alt="image"></p>
<p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/click.gif" alt="image"></p>
<p>SwipeRefreshLayout是google官方的刷新控件<br>Recyclerview则是未来取代listview，girdview等的新控件</p>
<p>.IDE android studio 1.5(2.o preview之前apk打包有bug，暂时不用了)</p>
<p>.Demo地址 <a href="https://github.com/mzeht/SwipeRefreshListDemo" target="_blank" rel="external">https://github.com/mzeht/SwipeRefreshListDemo</a> </p>
<h2 id="-MainActivity">.MainActivity</h2><p>activity_main.xml</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;android.support.design.widget.CoordinatorLayout
xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span>
xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span>
tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>&gt;

&lt;android.support.design.widget.AppBarLayout
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">theme=</span><span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;

    &lt;android.support.v7.widget.Toolbar
        android:<span class="variable">id=</span><span class="string">"@+id/toolbar"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"?attr/actionBarSize"</span>
        android:<span class="variable">background=</span><span class="string">"?attr/colorPrimary"</span>
        app:<span class="variable">popupTheme=</span><span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include <span class="variable">layout=</span><span class="string">"@layout/content_main"</span>/&gt;

&lt;android.support.design.widget.FloatingActionButton
    android:<span class="variable">id=</span><span class="string">"@+id/fab"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_gravity=</span><span class="string">"bottom|end"</span>
    android:<span class="variable">layout_margin=</span><span class="string">"@dimen/fab_margin"</span>
    android:<span class="variable">src=</span><span class="string">"@android:drawable/ic_dialog_email"</span>/&gt;

&lt;/android.support.design.widget.CoordinatorLayout&gt;
</code></pre><h2 id="-在其中的content_main-xml">.在其中的content_main.xml</h2><p>SwipeRefreshLayout 嵌套一个子元素 （如有多个，可用FrameLayout封装成一个）</p>
<pre><code>    &lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;RelativeLayout
        xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
    xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-    auto"</span>
    xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    app:<span class="variable">layout_behavior=</span><span class="string">"@string/    appbar_scrolling_view_behavior"</span>
    tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>
    tools:<span class="variable">showIn=</span><span class="string">"@layout/activity_main"</span>&gt;

&lt;android.support.v4.widget.SwipeRefreshLayout
    android:<span class="variable">id=</span><span class="string">"@+id/swiperefresh"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;android.support.v7.widget.RecyclerView
        android:<span class="variable">id=</span><span class="string">"@+id/recycler"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;/android.support.v7.widget.RecyclerView&gt;
&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre><h2 id="-RecyclerView的Item">.RecyclerView的Item</h2><p>*同经典的listviewItem，只是adapter略有区别</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;LinearLayout xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
          xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
          android:<span class="variable">orientation=</span><span class="string">"horizontal"</span>
          android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
          android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">id=</span><span class="string">"@+id/ll"</span>&gt;

&lt;ImageView
    android:<span class="variable">id=</span><span class="string">"@+id/image"</span>
    android:<span class="variable">src=</span><span class="string">"@mipmap/ic_launcher"</span>
    android:<span class="variable">padding=</span><span class="string">"5dp"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    /&gt;
&lt;TextView
    android:<span class="variable">id=</span><span class="string">"@+id/tv"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">textSize=</span><span class="string">"18sp"</span>
    android:<span class="variable">gravity=</span><span class="string">"center"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    tools:<span class="variable">text=</span><span class="string">"ss"</span>/&gt;

&lt;/LinearLayout&gt;
</code></pre><h2 id="-RecyclerView的分割线">.RecyclerView的分割线</h2><p>*RecyclerView 默认没有分割线，需要自定义一个，希望以后有默认可选，这里定义一个</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>{
<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = {android.R.attr.listDivider};
<span class="keyword">private</span> Drawable mDivider;
<span class="function"><span class="keyword">public</span> <span class="title">MyItemDecoration</span><span class="params">(Context context)</span>
</span>{
    TypedArray array = context.obtainStyledAttributes(ATTRS);
    <span class="comment">// 获取分隔条</span>
    mDivider = array.getDrawable(<span class="number">0</span>);
    array.recycle();
}
<span class="annotation">@Override</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span>
</span>{
    <span class="keyword">super</span>.onDrawOver(c, parent, state);
    <span class="keyword">int</span> count = parent.getChildCount();
    <span class="keyword">int</span> left = parent.getPaddingLeft();
    <span class="keyword">int</span> right = parent.getWidth()-parent.getPaddingRight();
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
    {
        View v = parent.getChildAt(i);
        RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) v.getLayoutParams();
        <span class="keyword">int</span> top = v.getBottom() + params.bottomMargin;
        <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();
        mDivider.setBounds(left,top,right,bottom);
        mDivider.draw(c);
    }
}

}
</code></pre><p>*MainActivity</p>
<pre><code>mRecyclerView= (RecyclerView) findViewById(R.id.recycler);
mRefreshlayout= (SwipeRefreshLayout) findViewById(R.id.swiperefresh);
mLinearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);
mAdapter = <span class="keyword">new</span> MainRecyclerAdapter(DataSource.generateData(<span class="number">20</span>),MainActivity.<span class="keyword">this</span>);
mRecyclerView.setAdapter(mAdapter);

<span class="comment">//每个item高度一致，可设置为true，提高性能</span>
mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);
mRecyclerView.setLayoutManager(mLinearLayoutManager);
<span class="comment">//分隔线</span>
mRecyclerView.addItemDecoration(<span class="keyword">new</span> MyItemDecoration(<span class="keyword">this</span>));
mRefreshlayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{

        <span class="keyword">new</span> UpdateTask().execute();

    }
});
</code></pre><p>   *开启异步任务模拟耗时操作</p>
<pre><code>   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AsyncTask&lt;Void</span>,<span class="title">Void</span>,<span class="title">List&lt;String&gt;&gt;</span>
</span>{
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; doInBackground(<span class="type">Void</span>... params)
    {
        <span class="keyword">try</span>
        {
            <span class="type">Thread</span>.sleep(<span class="number">2000</span>);
        } <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e)
        {
            e.printStackTrace();
        }
        <span class="type">List</span>&lt;<span class="type">String</span>&gt; strings = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();
        strings.add(<span class="string">"新数据1"</span>);
        strings.add(<span class="string">"新数据2"</span>);
        strings.add(<span class="string">"新数据3"</span>);
        strings.add(<span class="string">"新数据4"</span>);
        <span class="keyword">return</span> strings;
    }
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> void onPostExecute(<span class="type">List</span>&lt;<span class="type">String</span>&gt; strings)
    {
        mAdapter.addItems(strings);
        <span class="comment">//通知刷新完毕</span>
        mRefreshlayout.setRefreshing(<span class="literal">false</span>);
        <span class="comment">//滚动到列首部---&gt;这是一个很方便的api，可以滑动到指定位置</span>
        mRecyclerView.scrollToPosition(<span class="number">0</span>);
    }
}
</code></pre><h2 id="RecylerView的Item点击事件监听，内部各个子控件的监听">RecylerView的Item点击事件监听，内部各个子控件的监听</h2><pre><code>*在设计复杂listview 的时候，往往有Item点击事件和各个子控件的事件需要监听
*但是RecylerView没有提供OnItemOnclick的方法，需要我们自己去写
首先定义一个外部接口

```java

<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OnListClickListener</span> {

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View view,String data)</span></span>;


    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemTextClick</span><span class="params">(View view,String data)</span></span>;



    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemIconClick</span><span class="params">(View view ,String data)</span></span>;
}
</code></pre><p>*适配Adapter</p>
<p>public class MainRecyclerAdapter extends RecyclerView.Adapter<mainrecycleradapter.viewholder> {</mainrecycleradapter.viewholder></p>
<pre><code><span class="keyword">private</span> List&lt;String&gt; datas = <span class="keyword">null</span>;
<span class="keyword">private</span> OnListClickListener mListener;

<span class="function"><span class="keyword">public</span> <span class="title">MainRecyclerAdapter</span><span class="params">(List&lt;String&gt; datas,OnListClickListener l)</span>
</span>{
    <span class="keyword">this</span>.datas = datas;
    <span class="keyword">this</span>.mListener=l;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span>
</span>{
    <span class="keyword">final</span> View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item, parent, <span class="keyword">false</span>);
<span class="comment">//        itemView.setOnClickListener(new View.OnClickListener()</span>
<span class="comment">//        {</span>
<span class="comment">//            @Override</span>
<span class="comment">//            public void onClick(View v)</span>
<span class="comment">//            {</span>
<span class="comment">//                if(mListener != null)</span>
<span class="comment">//                {</span>
<span class="comment">//                    mListener.OnItemClick(v, (String) itemView.getTag());</span>
<span class="comment">//                }</span>
<span class="comment">//            }</span>
<span class="comment">//        });</span>
    ViewHolder viewHolder= <span class="keyword">new</span> ViewHolder(itemView);




    <span class="keyword">return</span> viewHolder;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span>
</span>{
    String s = datas.get(position);
    holder.bindData(s);
    holder.itemView.setTag(s);
    holder.mContent.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemTextClick(holder.mContent, (String) holder.itemView.getTag());
        }
    });

    holder.mImageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemIconClick(holder.mImageView, (String) holder.itemView.getTag());
        }
    });

    holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemClick(v, (String) holder.itemView.getTag());
        }
    });


}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span>
</span>{
    <span class="function"><span class="keyword">return</span> datas.<span class="title">size</span><span class="params">()</span></span>;
}
<span class="javadoc">/**
 * 批量增加
 * */</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;String&gt; items)</span>
</span>{
    <span class="keyword">if</span> (items == <span class="keyword">null</span>)
        <span class="keyword">return</span>;
    <span class="keyword">this</span>.datas.addAll(<span class="number">0</span>, items);
    <span class="keyword">this</span>.notifyItemRangeInserted(<span class="number">0</span>, items.size());
}

<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>
</span>{
    <span class="keyword">private</span> TextView mContent;
    <span class="keyword">private</span> ImageView mImageView;
    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span>
    </span>{
        <span class="keyword">super</span>(itemView);
        mContent = (TextView) itemView.findViewById(R.id.tv);
        mImageView= (ImageView) itemView.findViewById(R.id.image);
    }
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">bindData</span><span class="params">(String s)</span>
    </span>{
        <span class="keyword">if</span> (s != <span class="keyword">null</span>)
            mContent.setText(s);
    }

}
}
</code></pre><p>*通过对Item的根试图的监听，实现Item点击监听，不用设置最外层布局id，可以看出，Recyclerview强制对listview进行复用，对子控件的个性化定制在bind操作中进行，接口事件传递到Activity层，可以通过TAG传递数据，解耦合，如：</p>
<pre><code> @<span class="type">Override</span>
    public void <span class="type">OnItemClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="type">Item</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemTextClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">text</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemIconClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">icon</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRe]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://mzeht.com/2015/04/20/hello-world/"/>
    <id>http://mzeht.com/2015/04/20/hello-world/</id>
    <published>2015-04-19T17:05:05.000Z</published>
    <updated>2015-04-19T17:05:05.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="http://music.163.com/outchain/player?type=2&id=27671003&auto=0&height=66"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown 语法]]></title>
    <link href="http://mzeht.com/2015/03/10/2015-03-10-markdown/"/>
    <id>http://mzeht.com/2015/03/10/2015-03-10-markdown/</id>
    <published>2015-03-09T16:00:00.000Z</published>
    <updated>2015-04-01T16:09:54.000Z</updated>
    <content type="html"><![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span class="preprocessor">## Title2</span>
<span class="preprocessor">### Title3</span>
<span class="preprocessor">#### Title4</span>
<span class="preprocessor">##### Title5</span>
<span class="preprocessor">###### Title6</span>
</code></pre><p>效果：</p>
<h1 id="Title1">Title1</h1><h2 id="Title2">Title2</h2><h3 id="Title3">Title3</h3><h4 id="Title4">Title4</h4><h5 id="Title5">Title5</h5><h6 id="Title6">Title6</h6><h1 id="2-_引用">2. 引用</h1><p>代码：</p>
<pre><code><span class="blockquote">&gt; Reference1</span>
<span class="blockquote">&gt; &gt; Reference2</span>
<span class="blockquote">&gt; &gt; &gt; Reference3</span>
</code></pre><p>效果：</p>
<blockquote>
<p>Reference1</p>
<blockquote>
<p>Reference2</p>
<blockquote>
<p>Reference3</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="3-_列表">3. 列表</h1><p>代码：</p>
<pre><code><span class="bullet">+ </span>Row1
<span class="bullet">- </span>Row2
<span class="bullet">* </span>Row3
<span class="bullet">1. </span>Row4
<span class="bullet">2. </span>Row5
</code></pre><p>效果：</p>
<ul>
<li>Row1</li>
</ul>
<ul>
<li>Row2</li>
</ul>
<ul>
<li>Row3</li>
</ul>
<ol>
<li>Row4</li>
<li>Row5</li>
</ol>
<h1 id="4-_代码">4. 代码</h1><p>代码：</p>
<pre><code><span class="escape">`C</span>ode1<span class="escape">`
</span>
    Code2
</code></pre><p>效果：</p>
<p><code>Code1</code></p>
<pre><code>Code2
</code></pre><h1 id="5-_链接与图片">5. 链接与图片</h1><p>代码：</p>
<pre><code>[<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbs.weiphone.com "威锋网"</span>)

[<span class="link_label">WPER</span>][<span class="link_reference">ref</span>]
[<span class="link_reference">ref</span>]:<span class="link_url"> http://bbs.wper.com (威智网)</span>

![<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbsimages.weiphone.com/images/weiphone/logo.png "威锋论坛"</span>)

![<span class="link_label">WPER</span>][<span class="link_reference">pic</span>]
[<span class="link_reference">pic</span>]:<span class="link_url"> http://bbs.wper.com/static/image/wper/logo.png "威智网"</span>

<span class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://bbsimages.weiphone.com/images/weiphone/logo.png"</span> <span class="attribute">alt</span>=<span class="value">"BBS"</span> <span class="attribute">title</span>=<span class="value">"威锋网"</span> <span class="attribute">width</span>=<span class="value">"200"</span>/ &gt;</span></span>
</code></pre><p>效果：</p>
<p><a href="http://bbs.weiphone.com" title="威锋网" target="_blank" rel="external">WeiPhone</a></p>
<p><a href="http://bbs.wper.com" title="锋科技" target="_blank" rel="external">WPER</a></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋论坛"></p>
<p><img src="http://bbs.wper.com/static/image/wper/logo.png" alt="WPER" title="威智网"></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋网" width="200"></p>
<h1 id="6-_强调">6. 强调</h1><p>代码：</p>
<pre><code><span class="keyword">*</span>MarkDown<span class="keyword">*</span>
_MarkDown_
<span class="keyword">*</span><span class="keyword">*</span>MarkDown<span class="keyword">*</span><span class="keyword">*</span>
__MarkDown__
</code></pre><p>效果：</p>
<p><em>MarkDown</em><br><em>MarkDown</em><br><strong>MarkDown</strong><br><strong>MarkDown</strong></p>
<h1 id="7-_转义字符">7. 转义字符</h1><p>代码：</p>
<pre><code><span class="string">\\</span> <span class="string">\`</span> <span class="string">\*</span> <span class="string">\_</span> <span class="string">\{</span> <span class="string">\}</span> <span class="string">\[</span> <span class="string">\]</span> <span class="string">\(</span> <span class="string">\)</span> <span class="string">\#</span> <span class="string">\+</span> <span class="string">\-</span> <span class="string">\.</span> <span class="string">\!</span>
</code></pre><p>效果：</p>
<p>\ ` * _ { } [ ] ( ) # + - . !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span clas]]>
    </summary>
    
      <category term="markdown" scheme="http://mzeht.com/tags/markdown/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>