<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[my soul my beats]]></title>
  <subtitle><![CDATA[风雪依稀秋白发尾 灯火葳蕤]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mzeht.com/"/>
  <updated>2016-03-18T06:12:42.000Z</updated>
  <id>http://mzeht.com/</id>
  
  <author>
    <name><![CDATA[mzeht]]></name>
    <email><![CDATA[mzeht@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ConnectManager网络请求的三层封装（模块－转换－底层）]]></title>
    <link href="http://mzeht.com/2016/03/18/ConnectManager%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%89%E5%B1%82%E5%B0%81%E8%A3%85%EF%BC%88%E6%A8%A1%E5%9D%97%EF%BC%8D%E8%BD%AC%E6%8D%A2%EF%BC%8D%E5%BA%95%E5%B1%82%EF%BC%89/"/>
    <id>http://mzeht.com/2016/03/18/ConnectManager网络请求的三层封装（模块－转换－底层）/</id>
    <published>2016-03-18T06:01:47.000Z</published>
    <updated>2016-03-18T06:12:42.000Z</updated>
    <content type="html"><![CDATA[<p>调用层－数据解析层－底层</p>
<h2 id="调用层">调用层</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">getSystemToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetSystemTokenParam param = <span class="keyword">new</span> GetSystemTokenParam();</span><br><span class="line">        param.loginId=Constants.LOGINID;</span><br><span class="line">        String password=mPasswordView.getText().toString();</span><br><span class="line">        String encpwd=PasswordUtil.getEncPwd(Constants.LOGINID, password);</span><br><span class="line">        param.password= encpwd;</span><br><span class="line"><span class="comment">//        param.password= password;</span></span><br><span class="line">        L.i(<span class="string">"systemID"</span>,mUsernameView.getText().toString());</span><br><span class="line">        L.i(<span class="string">"明文密码"</span>,mPasswordView.getText().toString());</span><br><span class="line">        L.i(<span class="string">"loginID"</span>,Constants.LOGINID);</span><br><span class="line">        L.i(<span class="string">"password 加密结果为"</span>,encpwd);</span><br><span class="line">        L.i(<span class="string">"password 解密结果为"</span>,PasswordUtil.getDecPwd(Constants.LOGINID,encpwd));</span><br><span class="line">        ConnectManager.getInstance().getSystemToken(param,Tokencallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractRequestListener&lt;GetSystemTokenBean&gt; Tokencallback = <span class="keyword">new</span> AbstractRequestListener&lt;GetSystemTokenBean&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(GetSystemTokenBean bean)</span> </span>&#123;</span><br><span class="line">            tokenBean = bean;</span><br><span class="line">            tHandler.sendEmptyMessage(ActivityForResultUtil.REQUEST_DATA_SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(CustomError customError)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Message msg = tHandler.obtainMessage();</span><br><span class="line">            msg.obj = customError;</span><br><span class="line">            msg.what = ActivityForResultUtil.REQUEST_DATA_ERROR;</span><br><span class="line">            tHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFault</span><span class="params">(CustomError fault)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Message msg = tHandler.obtainMessage();</span><br><span class="line">            msg.obj = fault;</span><br><span class="line">            msg.what = ActivityForResultUtil.REQUEST_DATA_FAULT;</span><br><span class="line">            tHandler.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="数据转化层">数据转化层</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line">    * 请求systemToken</span><br><span class="line">    *</span><br><span class="line">    *<span class="javadoctag"> @param</span> params</span><br><span class="line">    *<span class="javadoctag"> @param</span> callback</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">getSystemToken</span><span class="params">(<span class="keyword">final</span> GetSystemTokenParam params,</span><br><span class="line">                            <span class="keyword">final</span> AbstractRequestListener&lt;GetSystemTokenBean&gt; callback)</span> </span>&#123;</span><br><span class="line">       exector.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   String method = params.getParam().getString(<span class="string">"method"</span>);</span><br><span class="line">                   String response = HttpConnectionUtil.openUrl(</span><br><span class="line">                           Constants.SERVER_URL + method, <span class="string">"GET"</span>,</span><br><span class="line">                           params.getParam(),<span class="keyword">false</span>);</span><br><span class="line">                   GetSystemTokenBean bean = GetSystemTokenBean.getSystemTokenBean(response);</span><br><span class="line">                   <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       callback.onComplete(bean);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">                   <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       callback.onFault(<span class="keyword">new</span> CustomError(network_error));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">                   <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       callback.onError(<span class="keyword">new</span> CustomError(json_error));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="网络底层">网络底层</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 发送http请求</span><br><span class="line">    *</span><br><span class="line">    * @param url</span><br><span class="line">    * @param <span class="keyword">method</span></span><br><span class="line">    *            <span class="type">GET</span> 或 <span class="type">POST</span></span><br><span class="line">    * @param params</span><br><span class="line">    * @<span class="keyword">return</span></span><br><span class="line">    */</span><br><span class="line">   public <span class="keyword">static</span> <span class="type">String</span> openUrl(<span class="type">String</span> url, <span class="type">String</span> <span class="keyword">method</span>, <span class="type">Bundle</span> params,boolean <span class="type">Token</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">method</span>.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (params != null) &#123;</span><br><span class="line">               url = url + <span class="string">"?"</span> + encodeUrl(params);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> response = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           L.i(<span class="keyword">method</span> + <span class="string">" URL: "</span> + url);</span><br><span class="line">           <span class="type">HttpClient</span> httpClient = <span class="type">HttpConnectionUtil</span>.getNewHttpClient();</span><br><span class="line">           <span class="type">HttpGet</span> httpGet = new <span class="type">HttpGet</span>(url);</span><br><span class="line">           <span class="keyword">if</span>(<span class="type">Token</span>==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">               httpGet.setHeader(<span class="string">"systemToken"</span>, <span class="type">Constants</span>.<span class="type">SYSTEMTOKEN</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           //连接超时</span><br><span class="line">           httpClient.getParams().setParameter(<span class="type">CoreConnectionPNames</span>.<span class="type">CONNECTION_TIMEOUT</span>, <span class="number">20000</span>);</span><br><span class="line">           // 读取超时</span><br><span class="line">           httpClient.getParams().setParameter(<span class="type">CoreConnectionPNames</span>.<span class="type">SO_TIMEOUT</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">           <span class="type">HttpResponse</span> resp = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (resp.getStatusLine().getStatusCode() != <span class="type">HttpStatus</span>.<span class="type">SC_OK</span>) &#123;</span><br><span class="line">               L.i(<span class="type">LOG_TAG</span>, <span class="string">"httpGet fail, status code = "</span> + resp.getStatusLine().getStatusCode());</span><br><span class="line"></span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               response = <span class="type">EntityUtils</span>.toString(resp.getEntity());</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (<span class="type">Exception</span> e) &#123;</span><br><span class="line">           throw new <span class="type">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       L.i(<span class="string">"LOG_TAG"</span>+response);</span><br><span class="line">       <span class="keyword">return</span> response;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="具体封装">具体封装</h1><h2 id="AbstractRequestListener">AbstractRequestListener</h2><p>public abstract class AbstractRequestListener<t extends="" object="">{</t></p>
<pre><code>/<span class="keyword">*</span><span class="keyword">*</span>
 <span class="keyword">*</span> 将response请求解析为针对具体请求的bean
 <span class="keyword">*</span> 
 <span class="keyword">*</span> <span class="comment">@param response </span>
 <span class="keyword">*</span>             请求完成后的响应字符串
 <span class="keyword">*</span> <span class="comment">@return </span>
 <span class="keyword">*</span>             若解析成功，返回解析后的对象，否则返回null
 <span class="keyword">*</span>/
<span class="comment">@SuppressWarnings("unchecked")</span>
public T parse(String response) {
    Class<span class="variable">&lt;?&gt;</span> c = this.getGenericType();
    try {
        Constructor<span class="variable">&lt;T&gt;</span> constructor = (Constructor<span class="variable">&lt;T&gt;</span>) c.getDeclaredConstructor(String.class);
        T result = constructor.newInstance(response);
        return result;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}

/<span class="keyword">*</span><span class="keyword">*</span>
 <span class="keyword">*</span> 获取T的类型
 <span class="keyword">*</span> <span class="comment">@param</span>
 <span class="keyword">*</span> <span class="comment">@return</span>
 <span class="keyword">*</span>/
private Class<span class="variable">&lt;?&gt;</span> getGenericType() {
    Type genType = getClass().getGenericSuperclass();
    if (!(genType instanceof ParameterizedType)) {
        return Object.class;
    }
    Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
    if (params.length <span class="variable">&lt; 1) {
        throw new RuntimeException("Index outof bounds");
    }
    if (!(params[0] instanceof Class)) {
        return Object.class;
    }
    return (Class&lt;?&gt;</span>) params[0];
}

 /<span class="keyword">*</span><span class="keyword">*</span>
 <span class="keyword">*</span> 请求完成后以对象形式返回服务器的响应的结果
 <span class="keyword">*</span> 
 <span class="keyword">*</span> <span class="comment">@param bean </span>
 <span class="keyword">*</span>             服务器返回的响应字符串解析后得到的对象
 <span class="keyword">*</span>        
 <span class="keyword">*</span>/
public abstract void onComplete(T bean);

/<span class="keyword">*</span><span class="keyword">*</span>
 <span class="keyword">*</span> 服务器返回了错误结果，已经正确的链接上了服务器但有错误如：缺少参数.等
 <span class="keyword">*</span> 
 <span class="keyword">*</span> <span class="comment">@param customError</span>
 <span class="keyword">*</span>/
public abstract void onError(CustomError customError);

/<span class="keyword">*</span><span class="keyword">*</span>
 <span class="keyword">*</span> 在请求期间发生了严重问题（如：网络故障、访问的地址不存在等）
 <span class="keyword">*</span> 
 <span class="keyword">*</span> <span class="comment">@param fault</span>
 <span class="keyword">*</span>/
public abstract void onFault(CustomError fault);
</code></pre><p>}</p>
<h2 id="CustomError">CustomError</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 错误码</span><br><span class="line">     */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mErrorCode;</span><br><span class="line"></span><br><span class="line">	<span class="javadoc">/** 原始响应URL */</span></span><br><span class="line">	<span class="keyword">private</span> String mResponse;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomError</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(errorMessage);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorMessage, String orgResponse)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(errorMessage);</span><br><span class="line">		<span class="keyword">this</span>.mErrorCode = errorCode;</span><br><span class="line">		<span class="keyword">this</span>.mResponse = orgResponse;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrgResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mResponse;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mErrorCode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"errorCode:"</span> + <span class="keyword">this</span>.mErrorCode + <span class="string">"\nerrorMessage:"</span></span><br><span class="line">				+ <span class="keyword">this</span>.getMessage() + <span class="string">"\norgResponse:"</span> + <span class="keyword">this</span>.mResponse;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 将服务器返回的errorMessage转换成定义的易于理解的字符串</span><br><span class="line">	 * </span><br><span class="line">	 *<span class="javadoctag"> @param</span> errorCode</span><br><span class="line">	 * 			服务器返回的错误代码</span><br><span class="line">	 *<span class="javadoctag"> @param</span> errorMessage</span><br><span class="line">	 * 			服务器返回的错误字符串，和错误代码一一对应</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">interpretErrorMessage</span><span class="params">(<span class="keyword">int</span> errorCode, String errorMessage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">switch</span> (errorCode) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="javadoc">/**</span><br><span class="line">			 * 错误处理</span><br><span class="line">			 */</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> errorMessage;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RequestParam">RequestParam</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">RequestParam</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 设置请求参数</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bundle <span class="title">getParam</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ResponseBean">ResponseBean</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ResponseBean</span> <span class="title">implements</span> <span class="title">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> String response;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ResponseBean</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ResponseBean</span><span class="params">(String response)</span> throws JSONException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(response == <span class="keyword">null</span> || response.equals(<span class="string">""</span>) ||response.equals(<span class="string">"null"</span>))</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"数据解析异常"</span>);</span><br><span class="line">		 </span><br><span class="line">		<span class="keyword">this</span>.response = response;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(String response)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.response = response;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 保存</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">saveModel</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		   L.i(<span class="string">"save_model"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 更新</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">updateModel</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		 L.i(<span class="string">"update_model"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 删除</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span>   <span class="keyword">void</span> <span class="title">deleteModel</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		 L.i(<span class="string">"delete_model"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="用法">用法</h1><p>参见Demo，给别人做的毕业设计。</p>
<p>Demo地址<a href="https://github.com/mzeht/ZhiHuiYun" target="_blank" rel="external">https://github.com/mzeht/ZhiHuiYun</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>调用层－数据解析层－底层</p>
<h2 id="调用层">调用层</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="封装" scheme="http://mzeht.com/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="网络通讯" scheme="http://mzeht.com/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
      <category term="设计模式" scheme="http://mzeht.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[express框架]]></title>
    <link href="http://mzeht.com/2016/03/17/express%E6%A1%86%E6%9E%B6/"/>
    <id>http://mzeht.com/2016/03/17/express框架/</id>
    <published>2016-03-17T04:08:02.000Z</published>
    <updated>2016-03-21T14:51:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基础知识">基础知识</h1><h2 id="Express介绍">Express介绍</h2><p>　　npm提供了大量的第三方模块，其中不乏许多Web框架，比如我们本章节要讲述的一个轻量级的Web框架 ——— Express。</p>
<p>　　Express是一个简洁、灵活的node.js Web应用开发框架, 它提供一系列强大的功能，比如：模板解析、静态文件服务、中间件、路由控制等等,并且还可以使用插件或整合其他模块来帮助你创建各种 Web和移动设备应用,是目前最流行的基于Node.js的Web开发框架，并且支持Ejs、jade等多种模板，可以快速地搭建一个具有完整功能的网站。</p>
<p>　　好，下面我们就开始吧！</p>
<p>NPM安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> express</span><br></pre></td></tr></table></figure>
<p>获取、引用</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="reserved">var</span> app = express();</span><br></pre></td></tr></table></figure>
<p>通过变量“app”我们就可以调用express的各种方法了，好戏刚刚开始，继续加油吧！</p>
<h2 id="创建应用">创建应用</h2><p>　　认识了Express框架，我们开始创建我们的第一个express应用。</p>
<p>　　在我们的默认项目主文件app.js添加如下内容：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(request, response)</span> </span>&#123;  </span><br><span class="line">   response.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>　　说明：在后面课程学习中，我们会统一使用80端口用于监听请求。</p>
<p>　　添加完毕之后，通过右侧栏的“测试地址”来查看浏览器内容，当看到“Hello World!”内容就表明一个简单的express应用已经创建成功了。
　　</p>
<h2 id="get请求">get请求</h2><p>　前面我们实现了一个简单的express应用，下面我们就开始具体讲述它的具体实现，首先我们先来学习Express的常用方法。</p>
<p>　　get方法 —— 根据请求路径来处理客户端发出的GET请求。</p>
<p>　　格式：app.get(path,function(request, response));</p>
<p>　　path为请求的路径，第二个参数为处理请求的回调函数，有两个参数分别是request和response，代表请求信息和响应信息。</p>
<p>如下示例：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">   response.send(<span class="string">'Welcome to the homepage!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">   response.send(<span class="string">'Welcome to the about page!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">    response.send(<span class="string">"404 error!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>　　上面示例中，指定了about页面路径、根路径和所有路径的处理方法。并且在回调函数内部，使用HTTP回应的send方法，表示向浏览器发送一个字符串。</p>
<p>　　参照以上代码，试试自己设定一个get请求路径，然后浏览器访问该地址是否可以请求成功。
　　</p>
<h2 id="all函数的基本用法">all函数的基本用法</h2><p>　　和get函数不同app.all()函数可以匹配所有的HTTP动词，也就是说它可以过滤所有路径的请求，如果使用all函数定义中间件，那么就相当于所有请求都必须先通过此该中间件。</p>
<p>格式：app.all(path,function(request, response));</p>
<p>如下所示，我们使用all函数在请求之前设置响应头属性。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.all(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response, next)</span> </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span> &#125;);      <span class="comment">//设置响应头属性值</span></span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">    response.end(<span class="string">"欢迎来到首页!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">"/about"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">    response.end(<span class="string">"欢迎来到about页面!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">    response.end(<span class="string">"404 - 未找到!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>　　上面代码参数中的“*”表示对所有路径有效，这个方法在给特定前缀路径或者任意路径上处理时会特别有用，不管我们请求任何路径都会事先经过all函数。
　　</p>
<h2 id="use基本用法1">use基本用法1</h2><p>use是express调用中间件的方法，它返回一个函数。</p>
<p>格式：app.use([path], function(request, response, next){});</p>
<p>可选参数path默认为”/“。</p>
<p>1.使用中间件</p>
<p>app.use(express.static(path.join(__dirname, ‘/‘)));<br>如上呢，我们就使用use函数调用express中间件设定了静态文件目录的访问路径(这里假设为根路径)。</p>
<p>2.如何连续调用两个中间件呢，如下示例：</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="comment">'express');</span></span><br><span class="line">var app = express();</span><br><span class="line"> </span><br><span class="line">app.use(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>, <span class="keyword">next</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"method："</span>+<span class="built_in">request</span>.method+<span class="string">" ==== "</span>+<span class="string">"url："</span>+<span class="built_in">request</span>.url);</span><br><span class="line">    <span class="keyword">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.use(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>)&#123;</span><br><span class="line">    <span class="built_in">response</span>.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span> &#125;);</span><br><span class="line">    <span class="built_in">response</span>.<span class="keyword">end</span>(<span class="comment">'示例：连续调用两个中间件');</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>回调函数的next参数，表示接受其他中间件的调用，函数体中的next()，表示将请求数据传递给下一个中间件。</p>
<p>上面代码先调用第一个中间件，在控制台输出一行信息，然后通过next()，调用第二个中间件，输出HTTP回应。由于第二个中间件没有调用next方法，所以req对象就不再向后传递了。</p>
<h2 id="use基本用法2">use基本用法2</h2><p>use方法不仅可以调用中间件，还可以根据请求的网址，返回不同的网页内容，如下示例：</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">"express"</span>);</span><br><span class="line">var app = express();</span><br><span class="line"> </span><br><span class="line">app.use(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>, <span class="keyword">next</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">request</span>.url == <span class="string">"/"</span>) &#123;</span><br><span class="line">      <span class="built_in">response</span>.send(<span class="string">"Welcome to the homepage!"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">next</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.use(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>, <span class="keyword">next</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">request</span>.url == <span class="string">"/about"</span>) &#123;</span><br><span class="line">     <span class="built_in">response</span>.send(<span class="string">"Welcome to the about page!"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">next</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.use(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>) &#123;</span><br><span class="line">  <span class="built_in">response</span>.send(<span class="string">"404 error!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码通过request.url属性，判断请求的网址，从而返回不同的内容。</p>
<h2 id="回调函数">回调函数</h2><p>　　Express回调函数有两个参数，分别是request(简称req)和response(简称res)，request代表客户端发来的HTTP请求，response代表发向客户端的HTTP回应，这两个参数都是对象。示例如下:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="获取主机名、路径名">获取主机名、路径名</h2><p>　　今天我们就先来学习如何使用req对象来处理客户端发来的HTTP请求。</p>
<p>1.req.host返回请求头里取的主机名(不包含端口号)。</p>
<p>2.req.path返回请求的URL的路径名。</p>
<p>如下示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.path);</span><br><span class="line">    <span class="comment">//console.log(req.host);</span></span><br><span class="line">    res.send(<span class="string">"req.host获取主机名，req.path获取请求路径名!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>试一试在浏览器中输入任意一个请求路径，通过req查看主机名或请求路径。</p>
<p><a href="http://localhost:8000/about" target="_blank" rel="external">http://localhost:8000/about</a></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">about</span></span><br><span class="line">/favicon.ico</span><br></pre></td></tr></table></figure>
<h2 id="query基本用法">query基本用法</h2><p>　　query是一个可获取客户端get请求路径参数的对象属性，包含着被解析过的请求参数对象，默认为{}。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query.参数名);</span><br><span class="line">    res.send(<span class="string">"测试query属性!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>通过req.query获取get请求路径的对象参数值。</p>
<p>格式：req.query.参数名；请求路径如下示例：</p>
<blockquote>
<p>例1： /search?n=Lenka</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req<span class="class">.query</span><span class="class">.n</span>  <span class="comment">// "Lenka"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>例2： /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req<span class="class">.query</span><span class="class">.order</span>  <span class="comment">// "desc"</span></span><br><span class="line"> </span><br><span class="line">req<span class="class">.query</span><span class="class">.shoe</span><span class="class">.color</span>  <span class="comment">// "blue"</span></span><br><span class="line"> </span><br><span class="line">req<span class="class">.query</span><span class="class">.shoe</span><span class="class">.type</span>  <span class="comment">// "converse"</span></span><br></pre></td></tr></table></figure>
<p>试一试get请求一个带参数路径，使用“req.query.参数名”方法获取请求参数值。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">app</span>.<span class="literal">get</span>('/<span class="keyword">about</span>',function(req,res)&#123;</span><br><span class="line">    console.<span class="literal">log</span>(req.<span class="keyword">query</span>.name);</span><br><span class="line">    res.send(<span class="string">"name="</span>+req.<span class="keyword">query</span>.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:8000/about?name=mzeht&amp;name=jj" target="_blank" rel="external">http://localhost:8000/about?name=mzeht&amp;name=jj</a></p>
<p>name=mzeht,jj</p>
<h2 id="param基本用法">param基本用法</h2><p>和属性query一样，通过req.param我们也可以获取被解析过的请求参数对象的值。</p>
<p>格式：req.param(“参数名”)；请求路径如下示例：</p>
<p>例1： 获取请求根路径的参数值，如/?n=Lenka，方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.param(<span class="string">"n"</span>)); <span class="comment">//Lenka</span></span><br><span class="line">    res.send(<span class="string">"使用req.param属性获取请求根路径的参数对象值!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>例2：我们也可以获取具有相应路由规则的请求对象，假设路由规则为 /user/:name/，请求路径/user/mike,如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="string">"/user/:name/"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    console.log(req.param(<span class="string">"name"</span>)); <span class="comment">//mike</span></span><br><span class="line">    res.send(<span class="string">"使用req.param属性获取具有路由规则的参数对象值!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>PS：所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。<br>如果没有相应参数的数据 req.param 返回值为undefined;</p>
<p>看了上面的示例，试一试使用req.param属性解析一个请求路径对象，并获取请求参数值。</p>
<h2 id="params基本用法">params基本用法</h2><p>和param相似，但params是一个可以解析包含着有复杂命名路由规则的请求对象的属性。</p>
<p>格式：req.params.参数名；</p>
<p>例1. 如上课时请求根路径的例子，我们就可以这样获取，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">"/user/:name/"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params.name); <span class="comment">//mike</span></span><br><span class="line">    res.send(<span class="string">"使用req.params属性获取具有路由规则的参数对象值!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>查看运行结果，和param属性功能是一样的，同样获取name参数值。</p>
<p>例2：当然我们也可以请求复杂的路由规则，如/user/:name/:id，假设请求地址为：/user/mike/123，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="built_in">get</span>(<span class="string">"/user/:name/:id"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(req.params.id); //<span class="string">"123"</span></span><br><span class="line">    <span class="keyword">res</span>.send(<span class="string">"使用req.params属性复杂路由规则的参数对象值!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对于请求地址具有路由规则的路径来说，属性params比param属性是不是又强大了那么一点点呢！</p>
<h2 id="send基本用法">send基本用法</h2><p>send()方法向浏览器发送一个响应信息，并可以智能处理不同类型的数据。格式如下：</p>
<p>res.send([body|status], [body]);<br>1.当参数为一个String时，Content-Type默认设置为”text/html”。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">send</span>(<span class="string">'Hello World'</span>);<span class="comment"> //Hello World</span></span><br></pre></td></tr></table></figure>
<p>2.当参数为Array或Object时，Express会返回一个JSON。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">res</span><span class="class">.send</span>(&#123; <span class="attribute">user</span>: <span class="string">'tobi'</span> &#125;); <span class="comment">//&#123;"user":"tobi"&#125;</span></span><br><span class="line"><span class="tag">res</span><span class="class">.send</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure>
<p>3.当参数为一个Number时，并且没有上面提到的任何一条在响应体里，Express会帮你设置一个响应体，比如：200会返回字符”OK”。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="built_in">send</span>(<span class="number">200</span>);<span class="comment"> // OK</span></span><br><span class="line">res.<span class="built_in">send</span>(<span class="number">404</span>);<span class="comment"> // Not Found</span></span><br><span class="line">res.<span class="built_in">send</span>(<span class="number">500</span>);<span class="comment"> // Internal Server Error</span></span><br></pre></td></tr></table></figure>
<p>send方法在输出响应时会自动进行一些设置，比如HEAD信息、HTTP缓存支持等等。</p>
<p>ps:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fri, <span class="number">18</span> Mar <span class="number">2016</span> <span class="number">11</span>:<span class="number">02</span>:<span class="number">43</span> GMT express deprecated req.<span class="function"><span class="title">param</span><span class="params">(name)</span></span>: Use req<span class="class">.params</span>, req<span class="class">.body</span>, or req<span class="class">.query</span> instead at app<span class="class">.js</span>:<span class="number">37</span>:<span class="number">21</span></span><br><span class="line">Fri, <span class="number">18</span> Mar <span class="number">2016</span> <span class="number">11</span>:<span class="number">02</span>:<span class="number">43</span> GMT express deprecated req.<span class="function"><span class="title">param</span><span class="params">(name)</span></span>: Use req<span class="class">.params</span>, req<span class="class">.body</span>, or req<span class="class">.query</span> instead at app<span class="class">.js</span>:<span class="number">38</span>:<span class="number">21</span></span><br><span class="line">Fri, <span class="number">18</span> Mar <span class="number">2016</span> <span class="number">11</span>:<span class="number">02</span>:<span class="number">43</span> GMT express deprecated res.<span class="function"><span class="title">send</span><span class="params">(status)</span></span>: Use res.<span class="function"><span class="title">sendStatus</span><span class="params">(status)</span></span> instead at app<span class="class">.js</span>:<span class="number">42</span>:<span class="number">9</span></span><br></pre></td></tr></table></figure>
<h1 id="准备登陆">准备登陆</h1><h2 id="模板引擎">模板引擎</h2><p>　　从本节课程开始我们要使用express框架实现一个简单的用户登陆功能，让我们先准备一下相关资源。</p>
<p>　　在nodejs中使用express框架，它默认的是ejs和jade渲染模板，今天我们就以ejs模板为例，讲述模板渲染网页模板的基础功能。</p>
<p>1.ejs模板安装方法</p>
<p>npm install ejs<br>2.目录下安装好了之后，如何调用呢，如下所示：</p>
<p>//指定渲染模板文件的后缀名为ejs<br>app.set(‘view engine’, ‘ejs’);<br>默认ejs模板只支持渲染以ejs为扩展名的文件，可能在使用的时候会觉得它的代码书写方式很不爽还是想用html的形式去书写，该怎么办呢，这时就得去修改模板引擎了，也就会用到express的engine函数。</p>
<p>engine注册模板引擎的函数，处理指定的后缀名文件。</p>
<p>// 修改模板文件的后缀名为html<br>app.set( ‘view engine’, ‘html’ );<br>// 运行ejs模块<br>app.engine( ‘.html’, require( ‘ejs’ ).<strong>express );<br>“</strong>express”，ejs模块的一个公共属性，表示要渲染的文件扩展名。</p>
<h2 id="静态资源">静态资源</h2><p>由于环境的限制，这里我们就不使用静态资源了，但是实际开发中我们肯定会用到，具体使用规则已在下面列出，可参考。</p>
<p>如果要在网页中加载静态文件（css、js、img），就需要另外指定一个存放静态文件的目录，当浏览器发出非HTML文件请求时，服务器端就会到这个目录下去寻找相关文件。</p>
<p>1.项目目录下添加一个存放静态文件的目录为public。</p>
<p>2.在public目录下在添加三个存放js、css、img的目录，相应取名为javascripts、stylesheets、images。</p>
<p>3.然后就可以把相关文件放到相应的目录下了。</p>
<p>4.比如，浏览器发出如下的样式表请求：</p>
<p> <link href="/stylesheets/bootstrap.min.css" rel="stylesheet" media="screen"><br>服务器端就到public/stylesheets/目录中寻找bootstrap.min.css文件。</p>
<p>有了静态目录文件，我们还得在启动文件里告诉它这个静态文件路径，需要指定一下，如下所示：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.<span class="keyword">static</span>(<span class="keyword">require</span>(<span class="string">'path'</span>).<span class="keyword">join</span>(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure>
<p>PS：express.static —— 指定静态文件的查找目录。</p>
<p>使用use函数调用中间件指定express静态访问目录，’public’就是我们我们新建的用来存放静态文件的总目录。</p>
<h2 id="添加视图">添加视图</h2><p>好，下面我们就来添加网页模板了，项目中我们会新建一个目录用来单独存放模板文件，这里我们就统一放到根路径上了。</p>
<p>下面开始新建index.html、login.html、home.html三个页面。</p>
<p>index.html页面参考内容如下：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="variable">style=</span><span class="string">"height:400px;width:550px;margin:50px auto;margin-left:auto;border:solid 1px;background: rgb(246, 246, 253);"</span>&gt;</span><br><span class="line">    &lt;div <span class="variable">style=</span><span class="string">"margin-left: 35px;"</span>&gt;</span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;form <span class="variable">action=</span><span class="string">"#"</span>  <span class="variable">role=</span><span class="string">"form"</span> <span class="variable">style=</span><span class="string">"margin-top: 90px;margin-left: 60px;"</span>&gt;</span><br><span class="line"><span class="comment"># 欢迎进入首页！</span></span><br><span class="line">            &lt;div <span class="variable">style=</span><span class="string">"margin-top: 145px;"</span>&gt;</span><br><span class="line">                &lt;input <span class="variable">type=</span><span class="string">"button"</span> <span class="variable">value=</span><span class="string">"登 陆"</span> /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>login.html页面参考内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/jquery-2.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height:300px;width:350px;margin:100px auto;margin-left:auto;border:solid 1px;background: rgb(246, 246, 253);"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:200px;margin:auto;margin-top:50px;"</span>&gt;</span></span><br><span class="line"># 用户登录</span><br><span class="line">        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"#"</span>  <span class="attribute">role</span>=<span class="value">"form"</span> <span class="attribute">method</span>=<span class="value">"post"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">style</span>=<span class="value">"margin: 20px 0px;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"password"</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"margin-top:30px;margin-left:125px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"登 陆"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>home.html页面参考内容如下：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="variable">style=</span><span class="string">"height:400px;width:550px;margin:50px auto;margin-left:auto;border:solid 1px;background: rgb(246, 246, 253);"</span>&gt;</span><br><span class="line">    &lt;div <span class="variable">style=</span><span class="string">"margin-left: 45px;"</span>&gt;</span><br><span class="line"><span class="comment"># 主页</span></span><br><span class="line">        &lt;form <span class="variable">action=</span><span class="string">"#"</span>  <span class="variable">role=</span><span class="string">"form"</span> <span class="variable">style=</span><span class="string">"margin-top: 90px;"</span>&gt;</span><br><span class="line"><span class="comment"># 登陆成功！</span></span><br><span class="line">            &lt;div <span class="variable">style=</span><span class="string">"margin-top: 145px;"</span>&gt;</span><br><span class="line">                &lt;input  <span class="variable">type=</span><span class="string">"button"</span> <span class="variable">value=</span><span class="string">"退 出"</span> /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>和静态文件一样，我们也要设置views存放的目录，如下：<br>// 设定views变量，意为视图存放的目录</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">set</span>(<span class="string">'views'</span>, __dirname);</span><br></pre></td></tr></table></figure>
<p>有了网页模板和指定目录，下面就可以访问它们了。</p>
<h2 id="访问视图">访问视图</h2><p>我们要如何对网页模板进行访问呢，这就要用到res对象的render函数了。</p>
<p>1.render函数，对网页模板进行渲染。</p>
<p>2.格式：res.render(view, [locals], callback);</p>
<p>3.参数view就是模板的文件名callback用来处理返回的渲染后的字符串，options、callback可省略，在渲染模板时locals可为其模板传入变量值，在模板中就可以调用所传变量了，在后面我们会讲述具体使用方法，也可先自行使用看其效果。</p>
<p>4.比如渲染我们刚刚添加的index.html页面，我们就可以在app.js中写入如下内容：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> path = <span class="keyword">require</span>(<span class="string">'path'</span>);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">set</span>(<span class="string">'views'</span>, __dirname);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">set</span>( <span class="string">'view engine'</span>, <span class="string">'html'</span> );</span><br><span class="line">app.engine( <span class="string">'.html'</span>, <span class="keyword">require</span>( <span class="string">'ejs'</span> ).__express );</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> <span class="comment">&#123;</span><br><span class="line">    res.render('index');</span><br><span class="line">&#125;</span>);</span></span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>
<p>运行之后在测试地址我们就可以看到所渲染的index页面了，试一试其他页面是否也可渲染成功？</p>
<h2 id="redirect基本用法">redirect基本用法</h2><p>redirect方法允许网址的重定向，跳转到指定的url并且可以指定status，默认为302方式。</p>
<p>格式：res.redirect([status], url);</p>
<p>例1：使用一个完整的url跳转到一个完全不同的域名。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span>.redirect(<span class="string">"http://www.hubwiz.com"</span>);</span><br></pre></td></tr></table></figure>
<p>例2：跳转指定页面，比如登陆页，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span>.redirect(<span class="string">"login"</span>);</span><br></pre></td></tr></table></figure>
<p>后面我们开始实现登陆功能，先试一下redirect重定向，跳转到我们网站如何？</p>
<h1 id="实现登陆">实现登陆</h1><h2 id="访问视图-1">访问视图</h2><p>前面我们已经添加了视图模板并学习了访问视图的方法，那我们就先回顾一下。</p>
<p>1.参考以下代码，地址栏访问这几个请求路径查看是否可以成功。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    res.render(<span class="string">'login'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/home'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    res.render(<span class="string">'home'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当浏览器看到了相应的视图页面就说明我们的代码是没有问题的，继续加油吧！</p>
<h2 id="用户登陆">用户登陆</h2><p>前面我们学习了express的get请求方法，今天我们就学习它的post请求方法。</p>
<p>1.post方法 —— 根据请求路径来处理客户端发出的Post请求。</p>
<p>2.格式：app.post(path,function(req, res));</p>
<p>3.和get方法一样，path为请求的路径，第二个参数为处理请求的回调函数，req和res分别代表请求信息和响应信息。</p>
<p>4.例如处理login的post请求，如下示例</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>了解了post方法，下面我们就开始使用post来实现简单的用户登陆功能。</p>
<h2 id="body基本用法">body基本用法</h2><p>实现登陆之前我们先来了解一个属性 —— body。</p>
<p>body属性解析客户端的post请求参数，通过它可获取请求路径的参数值。</p>
<p>格式：req.body.参数名；</p>
<p>下面我们就来测试body属性的功能，做一些准备工作。</p>
<p>修改login.html，为登陆按钮增加登陆事件。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"button"</span> onclick=<span class="string">"login();"</span> value=<span class="string">"登 陆"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> username = $(<span class="string">'#username'</span>).val();</span><br><span class="line">   <span class="keyword">var</span> data = &#123; <span class="string">"username"</span>: username &#125;;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">           url:<span class="string">'/login'</span>,</span><br><span class="line">           <span class="keyword">type</span>:<span class="string">'POST'</span>,</span><br><span class="line">           data:data</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要想使用body属性解析post请求参数值，我们需要先安装和引用express的两个中间件body-parser和multer，具体方法如下：。<br>2.1安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> body-parser</span><br><span class="line">npm <span class="keyword">install</span> multer</span><br></pre></td></tr></table></figure>
<p>2.2引用和调用</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="keyword">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="keyword">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">   ......</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.json());</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="keyword">true</span> &#125;));</span><br><span class="line">app.<span class="keyword">use</span>(multer());</span><br></pre></td></tr></table></figure>
<p>中间件body-parser和multer用于处理和解析post请求的数据。</p>
<h2 id="body基本用法(2)">body基本用法(2)</h2><p>到这里我们就可以测试post请求的body属性的简单用法了。</p>
<p>1.修改好之后的完整的文件app.js如下所示：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="keyword">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="keyword">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">app.set(<span class="string">'views'</span>, __dirname);</span><br><span class="line">app.set( <span class="string">'view engine'</span>, <span class="string">'html'</span> );</span><br><span class="line">app.engine( <span class="string">'.html'</span>, <span class="keyword">require</span>( <span class="string">'ejs'</span> ).__express );</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.json());</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="keyword">true</span> &#125;));</span><br><span class="line">app.<span class="keyword">use</span>(multer());</span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    res.render(<span class="string">'login'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">"/login"</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">"用户名称为："</span> + req.body.username);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>
<p>通过测试地址访问浏览器，试试录入任意一个用户名登录，查看通过body属性是否可以成功获取？</p>
<h2 id="准备登陆-1">准备登陆</h2><p>接下来我们就开始实现登陆功能，让我们要先做一些准备工作，为相关按钮添加点击事件、链接。</p>
<p>1.修改index.html，增加登陆链接。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">登 录</span>](<span class="link_url">login</span>)</span><br></pre></td></tr></table></figure></p>
<p>2.强化login页面的login方法，实现一个简单的post请求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> username = $(<span class="string">'#username'</span>).val();</span><br><span class="line">   <span class="keyword">var</span> password = $(<span class="string">'#password'</span>).val();</span><br><span class="line">   <span class="keyword">var</span> data = &#123; <span class="string">"username"</span>: username, <span class="string">"password"</span>:password&#125;;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'login'</span>,</span><br><span class="line">            type:<span class="string">'POST'</span>,</span><br><span class="line">            data:data,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span><span class="params">(data,status)</span></span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(status == <span class="string">'success'</span>)&#123;</span><br><span class="line">                     location.href=<span class="string">'home'</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span><span class="params">(data,status,e)</span></span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(status == <span class="string">"error"</span>)&#123;</span><br><span class="line">                      location.href=<span class="string">'login'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>网页模板准备已经就绪，下面我们开始修改启动文件app.js的内容。</p>
<h2 id="准备登陆-2">准备登陆</h2><p>下面我们就开始修改app启动文件的内容。</p>
<p>1.修改post方法，这里假设数据库中用户名的名字为admin、密码为admin。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user=&#123;</span><br><span class="line">        username:<span class="string">'admin'</span>,</span><br><span class="line">        password:<span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(req.body.username==user.username&amp;&amp;req.body.password==user.password)</span><br><span class="line">    &#123; </span><br><span class="line">       res.send(<span class="number">200</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       res.send( <span class="number">404</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">2.</span>一个完整的启动文件app.js如下所示：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = require(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = require(<span class="string">'multer'</span>);</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">set</span>(<span class="string">'views'</span>, __dirname);</span><br><span class="line">app.<span class="keyword">set</span>( <span class="string">'view engine'</span>, <span class="string">'html'</span> );</span><br><span class="line">app.engine( <span class="string">'.html'</span>, require( <span class="string">'ejs'</span> ).__express );</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.json());</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="keyword">use</span>(multer());</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/home'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    res.render(<span class="string">'home'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    res.render(<span class="string">'login'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user=&#123;</span><br><span class="line">        username:<span class="string">'admin'</span>,</span><br><span class="line">        password:<span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">if</span>(req.body.username==user.username&amp;&amp;req.body.password==user.password)      &#123;</span><br><span class="line">      res.send(<span class="number">200</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send( <span class="number">404</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>到这里，一个简单的Post登录就完成了，使用浏览器运行本地端口试试效果吧！</p>
<h2 id="访问控制">访问控制</h2><p>简单登陆部分按照我们的求已经完成了，但网站好些并不安全，反复测试我们发现，home.html页面本来是登陆以后才访问的，现在我们不需登陆，直接在浏览器输入也可访问，这样肯定是不能被允许的，那么我们还得再次对登陆功能进行强化。</p>
<p>1.login.html页面增加EJS模板变量&lt;%- message %&gt;保存登陆提示信息。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;<span class="comment">%- message %&gt;</span></span><br><span class="line"># 用户登录</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>2.home.html页面，登陆成功后跳转并传入用户名：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 恭喜_&lt;<span class="variable">%=</span> user.username <span class="variable">%&gt;</span>_，登陆成功！</span><br></pre></td></tr></table></figure>
<p>PS：使用EJS模板变量值使用&lt;%= variable_name %&gt;输出方式，字符串输出时默认经过escape转义编码。 当我们想要输出一些动态生成的HTML标签时可使用&lt;%- variable_nam %&gt;输出方式，这种方式不会被escape转义编码。</p>
<p>3.home.html页面添加退出链接，如下：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">退 出</span>](<span class="link_url">logout</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="访问控制-1">访问控制</h2><p>修改好了模板页，下面开始修改启动文件app.js的内容。</p>
<p>1.安装模块express-session并引用，安装、引用不在讲述。</p>
<p>2.使用新模块进行访问时间限制，如下：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> session <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">app<span class="built_in">.</span>use(session(&#123;</span><br><span class="line">    secret:<span class="string">'secret'</span>,</span><br><span class="line">    resave:<span class="literal">true</span>,</span><br><span class="line">    saveUninitialized:<span class="literal">false</span>,</span><br><span class="line">    cookie:&#123;</span><br><span class="line">        maxAge:<span class="number">1000</span><span class="subst">*</span><span class="number">60</span><span class="subst">*</span><span class="number">10</span>  <span class="comment">//过期时间设置(单位毫秒)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>3.app.js文件新增中间件并设置模板变量值，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span><span class="params">(req, res, next)</span>&#123;</span></span><br><span class="line">    <span class="keyword">res</span>.locals.user = req.session.user;</span><br><span class="line">    var err = req.session.error;</span><br><span class="line">    <span class="keyword">res</span>.locals.message = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">res</span>.locals.message = <span class="string">'&lt;div style="margin-bottom: 20px;color:red;"&gt;'</span> + err + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">    <span class="keyword">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>res.locals对象保存在一次请求范围内的响应体中的本地变量值。</p>
<p>PS：注意，中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在HTTP动词方法之前，否则不会执行。</p>
<p>4.增加logout路径处理(用户登陆退出)和index路径请求处理，如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span></span>&#123;</span><br><span class="line">    req.session.user = <span class="literal">null</span>;</span><br><span class="line">    req.session.error = <span class="literal">null</span>;</span><br><span class="line">    res.redirect(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/index'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>5.修改home路径请求处理，如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="string">'/home'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.session.user)&#123;</span><br><span class="line">        res.render(<span class="string">'home'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        req.session.error = <span class="string">"请先登录"</span></span><br><span class="line">        res.redirect(<span class="string">'login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>5.修改路径为login的Post请求</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/login'</span>,function(req,<span class="keyword">res)&#123;</span></span><br><span class="line">    var <span class="keyword">user</span>=<span class="keyword">&#123;</span></span><br><span class="line">        username:<span class="string">'admin'</span>,</span><br><span class="line">        <span class="literal">password</span>:<span class="string">'admin'</span></span><br><span class="line">    <span class="keyword">&#125;</span></span><br><span class="line"> <span class="keyword">if</span>(req.body.username==<span class="keyword">user</span>.username&amp;&amp;req.body.<span class="literal">password</span>==<span class="keyword">user</span>.<span class="keyword">password)&#123;</span></span><br><span class="line">        req.session.<span class="keyword">user</span> = <span class="keyword">user</span>;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">&#125;</span><span class="keyword">else&#123;</span></span><br><span class="line">        req.session.error = <span class="string">"用户名或密码不正确"</span>;</span><br><span class="line">        res.send( <span class="number">404</span> );</span><br><span class="line">    <span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">&#125;</span>);</span><br></pre></td></tr></table></figure>
<p>好，全部修改完毕，再次访问测试地址试试效果吧！</p>
<h1 id="路由登陆">路由登陆</h1><h2 id="路由介绍">路由介绍</h2><p>路由 ————为不同的访问路径，指定不同的处理方法。 在app.js中我们指定了app.get、app.post的不同路径的多个路由规则，在实际开发应用中，也会碰到具有多个路由记录的情况，针对这个问题，我们就要对这些路由记录做分开处理，以便于管理。</p>
<p>我们还是在登陆例子的基础上做如下修改。</p>
<p>1.添加三个js文件，名称分别为login、home、logout。</p>
<p>2.login.js文件，添加如下内容：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="function"><span class="keyword">function</span> <span class="params">( app )</span> </span>&#123;</span><br><span class="line">    app.<span class="keyword">get</span>(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">        res.render(<span class="string">'login'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    app.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> user=&#123;</span><br><span class="line">            username:<span class="string">'admin'</span>,</span><br><span class="line">            password:<span class="string">'admin'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(req.body.username==user.username&amp;&amp;req.body.password==user.password)&#123;</span><br><span class="line">            req.session.user = user;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            req.session.error = <span class="string">"用户名或密码不正确"</span></span><br><span class="line">            res.send( <span class="number">404</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.home.js文件，添加如下内容：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="params">( app )</span></span> &#123;</span><br><span class="line">    app.get(<span class="string">'/home'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(req.session.user)&#123;</span><br><span class="line">            res.render(<span class="string">'home'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            req.session.<span class="built_in">error</span> = <span class="string">"请先登录"</span></span><br><span class="line">            res.redirect(<span class="string">'login'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用路由2">使用路由2</h2><p>4.logout.js文件，添加如下内容：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="function"><span class="keyword">function</span> <span class="params">( app )</span> </span>&#123;</span><br><span class="line">    app.<span class="keyword">get</span>(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span></span>&#123;</span><br><span class="line">        req.session.user = <span class="literal">null</span>;</span><br><span class="line">        req.session.error = <span class="literal">null</span>;</span><br><span class="line">        res.redirect(<span class="string">'index'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.app.js文件中请求路径为logout、home、login的代码就可以删除了</p>
<p>6.新增的三个文件我们改如何使用呢，很简单，如下所示：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require<span class="list">('./login')</span><span class="list">(<span class="keyword">app</span>)</span><span class="comment">;</span></span><br><span class="line">require<span class="list">('./home')</span><span class="list">(<span class="keyword">app</span>)</span><span class="comment">;</span></span><br><span class="line">require<span class="list">('./logout')</span><span class="list">(<span class="keyword">app</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>对，就是这么简单，我们只需引用路由的目录即可。</p>
<p>到这里我们的用户登陆功能就安全了，现学现用赶快试试效果吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基础知识">基础知识</h1><h2 id="Express介绍">Express介绍</h2><p>　　npm提供了大量的第三方模块，其中不乏许多Web框架，比如我们本章节要讲述的一个轻量级的Web框架 ——— Express。</p>
<p>　　Express]]>
    </summary>
    
      <category term="Express" scheme="http://mzeht.com/tags/Express/"/>
    
      <category term="Nodejs" scheme="http://mzeht.com/tags/Nodejs/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nodejs入门]]></title>
    <link href="http://mzeht.com/2016/03/15/Nodejs%E5%85%A5%E9%97%A8/"/>
    <id>http://mzeht.com/2016/03/15/Nodejs入门/</id>
    <published>2016-03-15T11:38:32.000Z</published>
    <updated>2016-03-16T18:49:08.000Z</updated>
    <content type="html"><![CDATA[<p>总结<a href="http://www.hubwiz.com/course/5359f6f6ec7452081a7873d8/" target="_blank" rel="external">http://www.hubwiz.com/course/5359f6f6ec7452081a7873d8/</a></p>
<h1 id="快速入门">快速入门</h1><h2 id="hello_world">hello world</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="blockquote">&gt; hello world</span></span><br></pre></td></tr></table></figure>
<h2 id="回调函数">回调函数</h2><p>由于node是一个异步事件驱动的平台，所以在代码中我们经常需要使用回调函数。下面是回调函数应用的经典示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'callback is called'</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>我们传给setTimeout函数传入了一个匿名函数和一个调用时间2000(毫秒)，运行程序后等待2秒，可以看到输出了”callback is called”。</p>
<h2 id="标准回调函数">标准回调函数</h2><p>node.js中回调函数格式是约定俗成的，它有两个参数，第一个参数为err，第二个参数为data，顾名思义，err是错误信息，data则是返回的数据，示例如下:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(err,data)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了养成良好的编码习惯，在以后的课程示例或练习中，回调函数格式都将采用这样的格式。</p>
<h2 id="获取模块">获取模块</h2><p>为了支持快速开发，node平台上提供了大量的模块，封装了各自不同的功能，那么我们将如何调获取想要的模块呢，下来我们就来介绍。 在node中，我们可以使用require函数，具体语法如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"模块"</span>);</span><br></pre></td></tr></table></figure>
<p>怎么样，是不是很简单很方便，通过require函数我们就可以获取相应模块进而使用它的任意功能了。</p>
<h2 id="使用模块">使用模块</h2><p>os模块可提供操作系统的一些基本信息，它的一些常用方法如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = require(<span class="string">"os"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = os.platform(); //查看操作系统平台</span><br><span class="line">           //os.release(); 查看操作系统版本</span><br><span class="line">           //os.<span class="keyword">type</span>();  查看操作系统名称</span><br><span class="line">           //os.arch();  查看操作系统<span class="type">CPU</span>架构</span><br><span class="line"> </span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h1 id="进程管理">进程管理</h1><h2 id="简介">简介</h2><p>process是一个全局内置对象，可以在代码中的任何位置访问此对象，这个对象代表我们的node.js代码宿主的操作系统进程对象。</p>
<p>使用process对象可以截获进程的异常、退出等事件，也可以获取进程的当前目录、环境变量、内存占用等信息，还可以执行进程退出、工作目录切换等操作。</p>
<p>下面我们一起来学习一下process对象的一些常用方法。</p>
<h2 id="cwd函数的基本用法">cwd函数的基本用法</h2><p>当我们想要查看应用程序当前目录时，可以使用cwd函数，使用语法如下：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.cwd<span class="comment">()</span>;</span><br></pre></td></tr></table></figure>
<h2 id="chdir函数的基本用法">chdir函数的基本用法</h2><p>如果需要改变应用程序目录，就要使用chdir函数了，它的用法如下：</p>
<p>process.chdir(“目录”);</p>
<h2 id="stdout的基本用法">stdout的基本用法</h2><p>stdout是标准输出流，它是干什么的呢？请下看下面的示例：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span> = <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;</span><br><span class="line">    process.stdout.<span class="built_in">write</span>(d+<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没错，它的作用就是将内容打印到输出设备上，console.log就是封装了它。</p>
<h2 id="stderr的基本用法">stderr的基本用法</h2><p>stderr是标准错误流，和stdout的作用差不多，不同的是它是用来打印错误信息的，我们可以通过它来捕获错误信息，基本使用方法如下：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.stderr.<span class="command">write</span>(输入内容);</span><br></pre></td></tr></table></figure>
<h2 id="stdin的基本用法">stdin的基本用法</h2><p>stdin是进程的输入流,我们可以通过注册事件的方式来获取输入的内容，如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> chunk = process.stdin.read();</span><br><span class="line">  <span class="keyword">if</span> (chunk !== <span class="literal">null</span>) &#123;</span><br><span class="line">    process.stdout.write(<span class="string">'data: '</span> + chunk);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>示例中的chunk就是输入流中的内容。</p>
<h2 id="exit函数的基本用法">exit函数的基本用法</h2><p>如果你需要在程序内杀死进程，退出程序，可以使用exit函数，示例如下：</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">process</span>.<span class="keyword">exit</span>(code);</span><br></pre></td></tr></table></figure>
<p>参数code为退出后返回的代码，如果省略则默认返回0；</p>
<h2 id="注册事件">注册事件</h2><p>前面讲到如何在输入流中打印信息，当我们需要获取stdout内容的时候应该怎么做呢？请看如下的示例：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.stdout.<span class="keyword">on</span>(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span><span class="params">(data)</span><span class="comment">&#123;</span><br><span class="line">   console.log(data);</span><br><span class="line">&#125;</span>);</span></span><br></pre></td></tr></table></figure>
<p>为stdout注册data事件，我们就可以拿到它输出的内容了。</p>
<h2 id="设置编码">设置编码</h2><p>在我们的输入输出的内容中有中文的时候，可能会乱码的问题，这是因为编码不同造成的，所以在这种情况下需要为流设置编码，如下示例：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="literal">stdin</span>.setEncoding(编码);</span><br><span class="line"> </span><br><span class="line">process.<span class="literal">stdout</span>.setEncoding(编码);</span><br><span class="line"> </span><br><span class="line">process.<span class="literal">stderr</span>.setEncoding(编码);</span><br></pre></td></tr></table></figure>
<h2 id="课程小结">课程小结</h2><p>process的常用方法就讲到这里了，如果你想了解更多可以参考以下地址：</p>
<p><a href="http://nodejs.cn/api/process" target="_blank" rel="external">http://nodejs.cn/api/process</a><br><a href="http://nodeapi.ucdok.com/#/api/process.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/process.html</a></p>
<h1 id="文件I/O_fs模块的基本用法">文件I/O fs模块的基本用法</h1><p>开发中我们经常会有文件I/O的需求，node.js中提供一个名为fs的模块来支持I/O操作，fs模块的文件I/O是对标准POSIX函数的简单封装。</p>
<h2 id="writeFile函数的基本用法">writeFile函数的基本用法</h2><p>文件I/O，写入是必修课之一。fs模块提供writeFile函数，可以异步的将数据写入一个文件, 如果文件已经存在则会被替换。用法如下：</p>
<blockquote>
<p>例：fs.writeFile(filename, data, callback)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs= <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"> </span><br><span class="line">fs.writeFile(<span class="string">'test.txt'</span>, <span class="string">'Hello Node'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'Saved successfully'</span>); <span class="comment">//文件被保存</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>数据参数可以是string或者是Buffer,编码格式参数可选，默认为”utf8”，回调函数只有一个参数err。</p>
<h2 id="appendFile函数的基本用法">appendFile函数的基本用法</h2><p>writeFile函数虽然可以写入文件，但是如果文件已经存在，我们只是想添加一部分内容，它就不能满足我们的需求了，很幸运，fs模块中还有appendFile函数，它可以将新的内容追加到已有的文件中，如果文件不存在，则会创建一个新的文件。使用方法如下：</p>
<blockquote>
<p>例：fs.appendFile(文件名,数据,编码,回调函数(err));</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs= <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"> </span><br><span class="line">fs.appendFile(<span class="string">'test.txt'</span>, <span class="string">'data to append'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//数据被添加到文件的尾部</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The "data to append" was appended to file!'</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>编码格式默认为”utf8”</p>
<h2 id="exists函数的基本用法">exists函数的基本用法</h2><p>如何检查一个文件是否存在呢？我想exists函数可以帮助你，用法如下：</p>
<blockquote>
<p>例：fs.exists(文件，回调函数(exists));</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exists的回调函数只有一个参数，类型为布尔型，通过它来表示文件是否存在。</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs= <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"> </span><br><span class="line">fs.exists(<span class="string">'/etc/passwd'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(exists)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(exists ? <span class="string">"存在"</span> : <span class="string">"不存在!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="rename函数的基本用法">rename函数的基本用法</h2><p>修改文件名称是我们经常会遇见的事情，rename函数提供修改名称服务：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs= require(<span class="string">"fs"</span>);</span><br><span class="line"> </span><br><span class="line">fs.<span class="keyword">rename</span>(旧文件，新文件，回调函数(<span class="keyword">err</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) throw <span class="keyword">err</span>;</span><br><span class="line">   console.<span class="literal">log</span>('Successful modification,');</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="rename函数的基本用法-1">rename函数的基本用法</h2><p>移动文件也是我们经常会遇见的，可是fs没有专门移动文件的函数，但是我们可以通过rename函数来达到移动文件的目的，示例如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line">fs.rename(oldPath,newPath,<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'renamed complete'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="readFile函数的基本用法">readFile函数的基本用法</h2><p>读取文件是最常用到的功能之一，使用fs模块读取文件语法如下：</p>
<blockquote>
<p>例：fs.readFile(文件,编码,回调函数);</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line">fs.readFile(文件名, <span class="function"><span class="keyword">function</span> <span class="params">(err, data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>回调函数里面的data,就是读取的文件内容。</p>
<h2 id="unlink函数的基本用法">unlink函数的基本用法</h2><p>面对一堆垃圾的文件总是有想删除的冲动，我有强迫症？你才有呢。</p>
<p>好在有unlink函数，终于得救了，示例如下：</p>
<blockquote>
<p>例：fs.unlink(文件,回调函数(err));</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line">fs.unlink(文件, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'successfully deleted'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="mkdir函数的基本用法">mkdir函数的基本用法</h2><p>除了针对文件的操作，目录的创建、删除也经常遇到的，下面我们来看看node.js中如何创建目录：</p>
<blockquote>
<p>fs.mkdir(路径，权限，回调函数(err));<br>参数</p>
</blockquote>
<p>路径：新创建的目录。<br>权限：可选参数，只在linux下有效，表示目录的权限，默认为0777，表示文件所有者、文件所有者所在的组的用户、所有用户，都有权限进行读、写、执行的操作。<br>回调函数：当发生错误时，错误信息会传递给回调函数的err参数。</p>
<h2 id="rmdir函数的基本用法">rmdir函数的基本用法</h2><p>删除目录也是必不可少的功能，rmdir函数可以删除指定的目录：</p>
<blockquote>
<p>例：fs.rmdir(路径，回调函数(err));</p>
</blockquote>
<p>var fs = require(‘fs’);</p>
<p>fs.rmdir(path, function(err) {<br>  if (err) throw err;<br>  console.log(‘ok’);<br>});</p>
<h2 id="readdir函数的基本用法">readdir函数的基本用法</h2><p>如果要读取目录下所有的文件应该怎么办呢？readdir函数可以读取到指定目录下所有的文件，示例如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> </span><br><span class="line">fs.readdir(目录,回调函数(err,files));</span><br></pre></td></tr></table></figure>
<p>回调函数 (callback) 接受两个参数 (err, files) 其中 files 是一个存储目录中所包含的文件名称的数组，数组中不包括 ‘.’ 和 ‘..’。</p>
<h2 id="课程小结-1">课程小结</h2><p>文件I/O是最基本的操作，应该熟悉掌握。</p>
<p>fs模块不但提供异步的文件操作，还提供相应的同步操作方法，需要指出的是，nodejs采用异步I/O正是为了避免I/O时的等待时间，提高CPU的利用率，所以在选择使用异步或同步方法的时候需要权衡取舍。</p>
<p>本节课程讲解了fs模块常用的一些功能，当然它还有更多强大的功能，如果你想了解更多，可以参考以下资料：</p>
<p><a href="http://nodejs.cn/api/fs" target="_blank" rel="external">http://nodejs.cn/api/fs</a></p>
<p><a href="http://nodeapi.ucdok.com/#/api/fs.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/fs.html</a></p>
<h1 id="url处理_url模块的基本用法">url处理 url模块的基本用法</h1><p>node.js为互联网而生，和url打交道是无法避免的了，url模块提供一些基础的url处理。</p>
<h2 id="parse函数的基础用法">parse函数的基础用法</h2><p>parse函数的作用是解析url，返回一个json格式的数组，请看如下示例：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">url.parse(<span class="string">'http://www.baidu.com'</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">protocol</span>: <span class="string">'http:'</span>,</span><br><span class="line">  <span class="attribute">slashes</span>: null,</span><br><span class="line">  <span class="attribute">auth</span>: null,</span><br><span class="line">  <span class="attribute">host</span>: null,</span><br><span class="line">  <span class="attribute">port</span>: null,</span><br><span class="line">  <span class="attribute">hostname</span>: null,</span><br><span class="line">  <span class="attribute">hash</span>: null,</span><br><span class="line">  <span class="attribute">search</span>: null,</span><br><span class="line">  <span class="attribute">query</span>: null,</span><br><span class="line">  <span class="attribute">pathname</span>: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  <span class="attribute">path</span>: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  <span class="attribute">href</span>: <span class="string">'http://www.baidu.com'</span> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="parse函数_——_条件解析">parse函数 —— 条件解析</h2><p>parse函数的第二个参数是布尔类型，当参数为true时，会将查询条件也解析成json格式的对象。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">url.parse(<span class="string">'http://www.baidu.com?page=1'</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">protocol:</span> <span class="string">'http:'</span>,</span><br><span class="line"><span class="label">  slashes:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="label">  auth:</span> <span class="literal">null</span>,</span><br><span class="line"><span class="label">  host:</span> <span class="string">'www.baidu.com'</span>,</span><br><span class="line"><span class="label">  port:</span> <span class="literal">null</span>,</span><br><span class="line"><span class="label">  hostname:</span> <span class="string">'www.baidu.com'</span>,</span><br><span class="line"><span class="label">  hash:</span> <span class="literal">null</span>,</span><br><span class="line"><span class="label">  search:</span> <span class="string">'?page=1'</span>,</span><br><span class="line"><span class="label">  query:</span> &#123; <span class="string">page:</span> <span class="string">'1'</span> &#125;,</span><br><span class="line"><span class="label">  pathname:</span> <span class="string">'/'</span>,</span><br><span class="line"><span class="label">  path:</span> <span class="string">'/?page=1'</span>,</span><br><span class="line"><span class="label">  href:</span> <span class="string">'http://www.baidu.com/?page=1'</span> &#125;</span><br></pre></td></tr></table></figure>
<p>试一试，当参数分别为true和false时，返回数据中的query字段的内容有什么不同。</p>
<h2 id="parse函数_——_解析主机">parse函数 —— 解析主机</h2><p>parse函数的第三个参数也是布尔类型的，当参数为true，解析时会将url的”//“和第一个”/“之间的部分解析为主机名，示例如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">url.parse(<span class="string">'http://www.baidu.com/news'</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">protocol</span>: <span class="string">'http:'</span>,</span><br><span class="line">  <span class="attribute">slashes</span>: true,</span><br><span class="line">  <span class="attribute">auth</span>: null,</span><br><span class="line">  <span class="attribute">host</span>: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  <span class="attribute">port</span>: null,</span><br><span class="line">  <span class="attribute">hostname</span>: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  <span class="attribute">hash</span>: null,</span><br><span class="line">  <span class="attribute">search</span>: null,</span><br><span class="line">  <span class="attribute">query</span>: null,</span><br><span class="line">  <span class="attribute">pathname</span>: <span class="string">'/news'</span>,</span><br><span class="line">  <span class="attribute">path</span>: <span class="string">'/news'</span>,</span><br><span class="line">  <span class="attribute">href</span>: <span class="string">'http://www.baidu.com/news'</span> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="format函数的基础用法">format函数的基础用法</h2><p>format函数的作用与parse相反，它的参数是一个JSON对象，返回一个组装好的url地址，请看如下示例：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var url = require(<span class="string">'url'</span>);</span><br><span class="line">url.format(&#123;</span><br><span class="line"><span class="string">protocol:</span> <span class="string">'http:'</span>,</span><br><span class="line"><span class="string">hostname:</span><span class="string">'www.baidu.com'</span>,</span><br><span class="line"><span class="string">port:</span><span class="string">'80'</span>,</span><br><span class="line"><span class="string">pathname :</span><span class="string">'/news'</span>,</span><br><span class="line"><span class="string">query:</span>&#123;<span class="string">page:</span><span class="number">1</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.baidu.com/news?page=1</span></span><br></pre></td></tr></table></figure>
<p>参数JSON对象的字段跟parse函数解析后返回的JSON字段一一对应。</p>
<p>试一试传入一个对象，看看返回url是什么。</p>
<h2 id="resolve函数的基础用法">resolve函数的基础用法</h2><p>resolve函数的参数是两个路径，第一个路径是开始的路径或者说当前路径，第二个则是想要去往的路径，返回值是一个组装好的url，示例如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var url = <span class="keyword">require</span>(<span class="string">'url'</span>);</span><br><span class="line">url.resolve(<span class="string">'http://example.com/'</span>, <span class="string">'/one'</span>)  /<span class="regexp">/ 'http:/</span><span class="regexp">/example.com/one</span><span class="string">'</span><br><span class="line">url.resolve('</span><span class="symbol">http:</span>/<span class="regexp">/example.com/one</span><span class="string">', '</span>/two<span class="string">') // '</span><span class="symbol">http:</span>/<span class="regexp">/example.com/two</span><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>动动手，试一试resolve函数。</p>
<h2 id="课程小结-2">课程小结</h2><p>本节课程讲解了url模块常用的一些功能，如果你想了解更多，可以参考以下资料：</p>
<p><a href="http://nodejs.cn/api/url" target="_blank" rel="external">http://nodejs.cn/api/url</a></p>
<h1 id="path优化_path模块的基本用法">path优化 path模块的基本用法</h1><p>本模块包含一套用于处理和转换文件路径的工具集,用于处理目录的对象，提高用户开发效率，让我们一起来快速的认识path对象的一些常用方法吧！</p>
<h2 id="normalize函数的基本用法">normalize函数的基本用法</h2><p>normalize函数将不符合规范的路径经过格式化转换为标准路径,解析路径中的.与..外，还能去掉多余的斜杠。</p>
<p>如下示例：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> path <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'path'</span>);  </span><br><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> <span class="subst">=</span> path<span class="built_in">.</span>normalize(<span class="string">'/path///normalize/hi/..'</span>);</span><br><span class="line">console<span class="built_in">.</span><span class="keyword">log</span>(<span class="built_in">data</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/path/normalize/'</span></span><br></pre></td></tr></table></figure>
<p>看了上面的示例，是不是感觉很So easy，赶快寻个路径试试效果吧(按步操作哟)！</p>
<h2 id="join函数的基本用法">join函数的基本用法</h2><p>join函数将传入的多个路径拼接为标准路径并将其格式化，返回规范后的路径，避免手工拼接路径字符串的繁琐. 如下示例：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> path <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> <span class="subst">=</span> path<span class="built_in">.</span><span class="keyword">join</span>(<span class="string">'///you'</span>, <span class="string">'/are'</span>, <span class="string">'//beautiful'</span>);</span><br><span class="line">console<span class="built_in">.</span><span class="keyword">log</span>(<span class="built_in">data</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'/you/are/beautiful'</span></span><br></pre></td></tr></table></figure>
<h2 id="dirname函数用来返回路径中的目录名-_如下示例：">dirname函数用来返回路径中的目录名. 如下示例：</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> path <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> <span class="subst">=</span> path<span class="built_in">.</span>dirname(<span class="string">'/foo/strong/cool/nice'</span>); </span><br><span class="line">console<span class="built_in">.</span><span class="keyword">log</span>(<span class="built_in">data</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/foo/strong/cool'</span></span><br></pre></td></tr></table></figure>
<h2 id="basename函数的基本用法">basename函数的基本用法</h2><p>basename函数可返回路径中的最后一部分，并且可以对其进行条件排除. 如下示例：</p>
<p>例1：path.basename(‘路径字符串’);</p>
<p>例2：path.basename(‘路径字符串’, ‘[ext]’)&lt;排除[ext]后缀字符串&gt;;</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);    </span><br><span class="line"><span class="reserved">var</span> data1 = path.basename(<span class="string">'/foo/strong/basename/index.html'</span>);</span><br><span class="line"><span class="reserved">var</span> data2 = path.basename(<span class="string">'/foo/strong/basename/index.html'</span>,<span class="string">'.html'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data1 + <span class="string">' "and" '</span> + data2);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'index</span>.html <span class="string">"and"</span> index'</span><br></pre></td></tr></table></figure>
<h2 id="extname函数的基本用法">extname函数的基本用法</h2><p>extname函数返回路径中文件的扩展名(以最后一个’.’开始,返回’.’以及’.’以后的所有字符串,如没有’.’,则返回空字符串). 如下示例：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> path <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> <span class="subst">=</span> path<span class="built_in">.</span>extname(<span class="string">'index.html'</span>);</span><br><span class="line">console<span class="built_in">.</span><span class="keyword">log</span>(<span class="built_in">data</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'.html'</span></span><br></pre></td></tr></table></figure>
<h2 id="课程小结-3">课程小结</h2><p>很高兴您学完了本节课程，关于path的一些常用方法就先讲到这里了，如果您还想了解更多的话,可以参考以下地址：</p>
<p><a href="http://nodejs.cn/api/path" target="_blank" rel="external">http://nodejs.cn/api/path</a> </p>
<p><a href="http://nodeapi.ucdok.com/#/api/path.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/path.html</a></p>
<h1 id="字符串转换_Query_String模块的基本介绍">字符串转换 Query String模块的基本介绍</h1><p>Query String模块用于实现URL参数字符串与参数对象之间的互相转换，提供了”stringify”、”parse”等一些实用函数来针对字符串进行处理，通过序列化和反序列化，来更好的应对实际开发中的条件需求，对于逻辑的处理也提供了很好的帮助，下面就让我们一起来了解学习它吧！</p>
<h2 id="stringify函数的基本用法">stringify函数的基本用法</h2><p>stringify函数的作用就是序列化对象，也就是说将对象类型转换成一个字符串类型（默认的分割符（”&amp;”）和分配符（”=”）），本节先介绍它的基本用法，在下一节里我们将学习如何替换默认分配符，下面我们就通过以下例子来清楚的认识一下吧！</p>
<blockquote>
<p>例1：querystring.stringify(“对象”)</p>
</blockquote>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring= require('querystring');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = querystring.stringify(&#123;foo:'bar',cool:['xux', 'yys']&#125;);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">foo=</span>bar&amp;<span class="variable">cool=</span>xux&amp;<span class="variable">cool=</span>yys</span><br></pre></td></tr></table></figure>
<h2 id="stringify函数的多参数用法">stringify函数的多参数用法</h2><p>这节我们来学习stringify函数的多参数用法，上节我们知道了对象被序列化为字符串之后默认是通过分割符（”&amp;”）和分配符（”=”）组成的，那可不可以改变呢，这节我们就来了解一下，是否可以自己去定义组合结果，看下面的小例子</p>
<blockquote>
<p>例1：querystring.stringify(“对象”，”分隔符”，”分配符”)</p>
</blockquote>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = require('querystring');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = querystring.stringify(&#123;foo:'bar',cool:['xux', 'yys']&#125;,'*','$');</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'foo<span class="variable">$bar</span>*cool<span class="variable">$xux</span>*cool<span class="variable">$yys</span>'</span><br></pre></td></tr></table></figure>
<h2 id="parse函数的基本用法">parse函数的基本用法</h2><p>刚刚我们已经学习了stringify函数的作用，接下来就来学习反序列化函数——parse函数，parse函数的作用就是反序列化字符串（默认是由”=”、”&amp;”拼接而成），转换得到一个对象类型。如下示例：</p>
<blockquote>
<p>例1：querystring.parse(“字符串”)</p>
</blockquote>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = require('querystring');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = querystring.parse('foo=bar&amp;cool=xux&amp;cool=yys');</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">foo</span>: <span class="string">'bar'</span>, <span class="attribute">cool</span>: [<span class="string">'xux'</span>, <span class="string">'yys'</span>]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="parse函数的多参数用法">parse函数的多参数用法</h2><p>现在我们学习parse函数的扩展用法，和上节stringify函数的多参数用法不同的是，parse函数可以根据用户所自定义的分割符、分配符来反序列化字符串，从而得到相应的对象结果.如下示例：</p>
<blockquote>
<p>例1：querystring.parse(“字符串”，”分隔符”，”分配符”)</p>
</blockquote>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = require('querystring');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = querystring.parse('foo@bar$cool@xux$cool@yys','@','$');</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">foo</span>: <span class="string">''</span>, <span class="attribute">bar</span>: <span class="string">'cool'</span>, <span class="attribute">xux</span>: <span class="string">'cool'</span>, <span class="attribute">yys</span>: <span class="string">''</span> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="课程小结-4">课程小结</h2><p>很高兴您学完了本节课程，关于querystring的一些常用方法就先讲到这里了，如果您还想了解更多的话,可以参考以下地址：</p>
<p><a href="http://nodejs.cn/api/querystring" target="_blank" rel="external">http://nodejs.cn/api/querystring</a><br><a href="http://nodeapi.ucdok.com/#/api/querystring.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/querystring.html</a></p>
<h1 id="实用工具_UTIL模块的基本介绍">实用工具 UTIL模块的基本介绍</h1><p>关于模块的如何访问前面已经讲述过了，相信大家已经完全掌握了，这节课我们来学习util模块。util模块呢，是一个Node.js核心模块，提供常用函数的集合，用于弥补核心JavaScript的一些功能过于精简的不足。并且还提供了一系列常用工具，用来对数据的输出和验证。</p>
<h2 id="inspect函数的基本用法">inspect函数的基本用法</h2><p>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换为字符串的函数，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象,我们来学习它的简单用法。使用语法如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.inspect(<span class="keyword">object</span>);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h2 id="format函数的基本用法">format函数的基本用法</h2><p>format函数根据第一个参数，返回一个格式化字符串，第一个参数是一个可包含零个或多个占位符的字符串。每一个占位符被替换为与其对应的转换后的值，支持的占位符有：”%s(字符串)”、”%d(数字&lt;整型和浮点型&gt;)”、”%j(JSON)”、”%(单独一个百分号则不作为一个参数)”。</p>
<p>1：如果占位符没有相对应的参数，占位符将不会被替换.如示例：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.format('%s:%s', 'foo');</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'foo</span>:%s'</span><br></pre></td></tr></table></figure>
<p>2：如果有多个参数占位符，额外的参数将会调用util.inspect()转换为字符串。这些字符串被连接在一起，并且以空格分隔。如示例：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.format('%s:%s', 'foo', 'bar', 'baz');</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'foo</span>:bar baz'</span><br></pre></td></tr></table></figure>
<p>3：如果第一个参数是一个非格式化字符串，则会把所有的参数转成字符串并以空格隔开拼接在一块，而且返回该字符串。如示例：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.format(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1 2 3'</span></span><br></pre></td></tr></table></figure>
<h2 id="isArray函数的基本用法">isArray函数的基本用法</h2><p>isArray函数可以判断对象是否为数组类型，是则返回ture,否则为false。语法如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.isArray(<span class="keyword">object</span>);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h2 id="isDate函数的基本用法">isDate函数的基本用法</h2><p>isDate函数可以判断对象是否为日期类型，是则返回ture,否则返回false。语法如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.isDate(<span class="keyword">object</span>);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h2 id="isRegExp函数的基本用法">isRegExp函数的基本用法</h2><p>isRegExp函数可以判断对象是否为正则类型，是则返回ture,否则返回false。语法如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = require('util');</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = util.isRegExp(<span class="keyword">object</span>);</span><br><span class="line">console.log(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure>
<h2 id="课程小结-5">课程小结</h2><p>很高兴您学完了本节课程，关于util模块的一些常用方法就先讲到这里了，如果您还想了解更多的话,可以参考以下地址：</p>
<p><a href="http://nodejs.cn/api/util" target="_blank" rel="external">http://nodejs.cn/api/util</a></p>
<p><a href="http://nodeapi.ucdok.com/#/api/util.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/util.html</a></p>
<h1 id="子进程_child_process模块的基本介绍">子进程 child_process模块的基本介绍</h1><p>众所周知node.js是基于单线程模型架构，这样的设计可以带来高效的CPU利用率，但是无法却利用多个核心的CPU，为了解决这个问题，node.js提供了child_process模块，通过多进程来实现对多核CPU的利用. child_process模块提供了四个创建子进程的函数，分别是spawn，exec，execFile和fork。</p>
<h2 id="pawn函数的简单用法">pawn函数的简单用法</h2><p>spawn函数用给定的命令发布一个子进程，只能运行指定的程序，参数需要在列表中给出。如下示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">var</span> child = child_process.spawn( command );</span><br><span class="line">child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过执行命令得到返回结果，我们就可以拿到标准输出流数据了。</p>
<h2 id="exec函数的简单用法">exec函数的简单用法</h2><p>exec也是一个创建子进程的函数，与spawn函数不同它可以直接接受一个回调函数作为参数，回调函数有三个参数，分别是err, stdout , stderr，基本使用方法如下：</p>
<p>var child_process = require(‘child_process’);<br>child_process.exec( command , function(err, stdout , stderr ) {<br>  console.log( stdout );<br>});<br>exec函数可以直接接受一个回调函数作为参数，回调函数有三个参数，分别是err, stdout,stderr，非常方便直接使用，</p>
<h2 id="execFile函数的简单用法">execFile函数的简单用法</h2><p>execFile函数与exec函数类似，但execFile函数更显得精简，因为它可以直接执行所指定的文件，基本使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">child_process.execFile( file , <span class="function"><span class="keyword">function</span><span class="params">(err, stdout , stderr )</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( stdout );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>execFile与spawn的参数相似，也需要分别指定执行的命令和参数，但可以接受一个回调函数，与exec的回调函数相同。</p>
<h2 id="execFile函数的简单用法-1">execFile函数的简单用法</h2><p>execFile函数与exec函数类似，但execFile函数更显得精简，因为它可以直接执行所指定的文件，基本使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">child_process.execFile( file , <span class="function"><span class="keyword">function</span><span class="params">(err, stdout , stderr )</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( stdout );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>execFile与spawn的参数相似，也需要分别指定执行的命令和参数，但可以接受一个回调函数，与exec的回调函数相同。</p>
<h2 id="课程小结-6">课程小结</h2><p>恭喜你学完了本节课程，关于child_process的四个函数的基本简单用法，就先讲到这里了，如果您还想深入了解学习的话,可以参考以下地址：</p>
<p><a href="http://nodejs.cn/api/child_process" target="_blank" rel="external">http://nodejs.cn/api/child_process</a><br><a href="http://nodeapi.ucdok.com/#/api/child_process.html" target="_blank" rel="external">http://nodeapi.ucdok.com/#/api/child_process.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总结<a href="http://www.hubwiz.com/course/5359f6f6ec7452081a7873d8/" target="_blank" rel="external">http://www.hubwiz.com/course/5359f6f6ec]]>
    </summary>
    
      <category term="Nodejs" scheme="http://mzeht.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android project from eclipes to androidstudio]]></title>
    <link href="http://mzeht.com/2016/02/25/eclipes-to-androidstudio/"/>
    <id>http://mzeht.com/2016/02/25/eclipes-to-androidstudio/</id>
    <published>2016-02-25T06:55:23.000Z</published>
    <updated>2016-02-28T04:28:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="jar包冲突">jar包冲突</h2><blockquote>
<p>Error:Execution failed for task ‘:app:transformResourcesWithMergeJavaResForDebug’.<br>com.android.build.api.transform.TransformException: com.android.builder.packaging.DuplicateFileException: Duplicate files copied in APK META-INF/LICENSE.txt<br>      File1: /Users/wpmac/AndroidStudioProjects/Android_XinJiang/app/libs/httpmime-4.1.1.jar<br>      File2: /Users/wpmac/AndroidStudioProjects/Android_XinJiang/app/libs/commons-codec-1.4.jar</p>
</blockquote>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">packagingOptions &#123;</span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'META-INF/DEPENDENCIES'</span></span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'META-INF/LICENSE.txt'</span></span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'META-INF/NOTICE.txt'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="图片资源报错">图片资源报错</h2><blockquote>
<p>AAPT: /Users/wpmac/AndroidStudioProjects/Android_JieQian/app/src/main/res/drawable-xhdpi/suspected_association_normal.png: libpng warning: iCCP: Not recognizing known sRGB profile that has been edited<br>AAPT err(Facade for 203993302) : No Delegate set : lost message:/Users/wpmac/AndroidStudioProjects/Android_JieQian/app/src/main/res/drawable-xhdpi/register_info_normal.png: libpng warning: iCCP: Not recognizing known sRGB profile that has been edited<br>AAPT: /Users/wpmac/AndroidStudioProjects/Android_JieQian/app/src/main/res/drawable-xxhdpi/attention_pressed.png: libpng warning: iCCP: Not recognizing known sRGB profile that has been edited<br>AAPT: /Users/wpmac/AndroidStudioProjects/Android_JieQian/app/src/main/res/drawable-hdpi/splash_imageview.png: libpng warning: iCCP: Not recognizing known sRGB profile that has been edited<br>AAPT: /Users/wpmac/AndroidStudioProjects/Android_JieQian/app/src/main/res/drawable-xhdpi/province_select.png: libpng warning: iCCP: Not recognizing known sRGB profile that has been edited</p>
</blockquote>
<p>buildtools 23.0.2  warning: iCCP: Not recognizing known sRGB profile that has been edited</p>
<p>21.1.1 no warning   iCCP: Not recognizing known sRGB profile that has been edited</p>
<p>not a png file :check png file </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="jar包冲突">jar包冲突</h2><blockquote>
<p>Error:Execution failed for task ‘:app:transformResourcesWithMergeJavaResForDebug’.<br>com.android]]>
    </summary>
    
      <category term="debug" scheme="http://mzeht.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meterial design for developer]]></title>
    <link href="http://mzeht.com/2016/02/14/Meterial-design-for-developer/"/>
    <id>http://mzeht.com/2016/02/14/Meterial-design-for-developer/</id>
    <published>2016-02-14T13:05:35.000Z</published>
    <updated>2016-03-15T11:40:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="入门指南">入门指南</h1><p>如果要使用材料设计创建应用：</p>
<ol>
<li>请查阅材料<a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">设计规范</a>。<ul>
<li>在您的应用中使用材料主题。</li>
<li>遵循材料设计指导方针创建您的布局。</li>
<li>指定您视图要投射阴影的高度。</li>
<li>使用系统小组件呈现列表与卡片。</li>
<li>定制您的应用中的动画。</li>
</ul>
</li>
</ol>
<p>保持后向兼容性</p>
<p>您可将多个材料设计功能添加至您的应用，同时保持与 Android 5.0 之前的 Android 版本的兼容性。 如果要了解更多信息，请参阅 保持兼容性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门指南">入门指南</h1><p>如果要使用材料设计创建应用：</p>
<ol>
<li>请查阅材料<a href="http://www.google.com/design/spec/material-design/introduction.html" tar]]>
    </summary>
    
      <category term="Meterial design" scheme="http://mzeht.com/tags/Meterial-design/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[User Gradle sample]]></title>
    <link href="http://mzeht.com/2016/02/10/User-Gradle-sample/"/>
    <id>http://mzeht.com/2016/02/10/User-Gradle-sample/</id>
    <published>2016-02-09T17:19:32.000Z</published>
    <updated>2016-02-09T17:27:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Example_4-1-_Executing_multiple_tasks">Example 4.1. Executing multiple tasks</h1><p>build.gradle</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> <span class="keyword">compile</span> &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'compiling source'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> compileTest(dependsOn: <span class="keyword">compile</span>) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'compiling unit tests'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> test(dependsOn: [<span class="keyword">compile</span>, compileTest]) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'running unit tests'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> dist(dependsOn: [<span class="keyword">compile</span>, test]) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'building the distribution'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output of gradle dist test</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle dist test</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"><span class="symbol">:test</span></span><br><span class="line">running unit tests</span><br><span class="line"><span class="symbol">:dist</span></span><br><span class="line">building the distribution</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">1</span> secs</span><br></pre></td></tr></table></figure>
<h1 id="Example_4-2-_Excluding_tasks">Example 4.2. Excluding tasks</h1><p>Output of gradle dist -x test</p>
<p>你能通过使用-x 命令来排除某些任务的执行，我们来使用之前的脚本来演示</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle dist -x test</span><br><span class="line">:compile</span><br><span class="line">compiling source</span><br><span class="line">:dist</span><br><span class="line">building <span class="operator">the</span> distribution</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total <span class="built_in">time</span>: <span class="number">1</span> <span class="built_in">secs</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Example_4-1-_Executing_multiple_tasks">Example 4.1. Executing multiple tasks</h1><p>build.gradle</p>
<figure class="highlight gradle]]>
    </summary>
    
      <category term="gradle sample" scheme="http://mzeht.com/tags/gradle-sample/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle.4 Using the Gradle Command-Line]]></title>
    <link href="http://mzeht.com/2016/02/10/Gradle-4-Using-the-Gradle-Command-Line/"/>
    <id>http://mzeht.com/2016/02/10/Gradle-4-Using-the-Gradle-Command-Line/</id>
    <published>2016-02-09T17:12:31.000Z</published>
    <updated>2016-02-11T02:42:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="4-通过命令行使用gradle">4.通过命令行使用gradle</h1><p>这张将介绍使用gradle命令行的基础知识，就像你在前几章看到的那样</p>
<h2 id="4-1_执行多重任务">4.1 执行多重任务</h2><p>你能使用命令通过一个脚本来执行多个任务，例如这个命令<code>gradle compile test</code>,他会执行compite和test两个任务，gradle会按照命令行中的任务顺序来有序执行，也会运行其依赖项目，每个任务仅仅只执行一次，无论它在脚本中如何被引用，是直接指定还是作为其他任务的依赖，或者两者都是，让我们来看一个例子.</p>
<p>以下四个任务，<code>dist</code>和<code>test</code>都依赖于<code>complie</code>，执行<code>gradle dist test</code>，结果<code>complie</code>任务只会运行一次.</p>
<p>图4.1 task依赖图<br><img src="http://7xqtsx.com1.z0.glb.clouddn.com/commandLineTutorialTasks.png" alt=""><br><code>官方演示图错了，test不是指向complie，而是complie指向test</code></p>
<p>例4.1 执行多任务脚本</p>
<p>build.gradle</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> <span class="keyword">compile</span> &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'compiling source'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> compileTest(dependsOn: <span class="keyword">compile</span>) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'compiling unit tests'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> test(dependsOn: [<span class="keyword">compile</span>, compileTest]) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'running unit tests'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> dist(dependsOn: [<span class="keyword">compile</span>, test]) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'building the distribution'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gradle dist test的输出</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle dist test</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"><span class="symbol">:test</span></span><br><span class="line">running unit tests</span><br><span class="line"><span class="symbol">:dist</span></span><br><span class="line">building the distribution</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">1</span> secs</span><br></pre></td></tr></table></figure>
<p>每个任务只执行了一次，所以gradle test test 和 gradle test 的结果是一样的</p>
<p>这是本人测试的，第一次速度明显很慢<br>参考<a href="https://docs.gradle.org/2.11/userguide/gradle_daemon.html" target="_blank" rel="external">https://docs.gradle.org/2.11/userguide/gradle_daemon.html</a></p>
<p>windows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">if</span> not exist <span class="string">"%USERPROFILE%/.gradle"</span> mkdir <span class="string">"%USERPROFILE%/.gradle"</span>) &amp;&amp; (<span class="built_in">echo</span> org.gradle.daemon=<span class="literal">true</span> &gt;&gt; <span class="string">"%USERPROFILE%/.gradle/gradle.properties"</span>)</span><br></pre></td></tr></table></figure>
<p>UNIX:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;touch ~<span class="regexp">/.gradle/gradle</span>.properties &amp;&amp; echo <span class="string">"org.gradle.daemon=true"</span> <span class="prompt">&gt;&gt; </span>~<span class="regexp">/.gradle/gradle</span>.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="constant">Desktop </span> gradle dist test</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"><span class="symbol">:test</span></span><br><span class="line">running unit tests</span><br><span class="line"><span class="symbol">:dist</span></span><br><span class="line">building the distribution</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">4.446</span> secs</span><br><span class="line"></span><br><span class="line"><span class="constant">This </span>build could be faster, please consider using the <span class="constant">Gradle Daemon:</span> <span class="symbol">https:</span>/<span class="regexp">/docs.gradle.org/</span><span class="number">2.8</span>/userguide/gradle_daemon.html</span><br><span class="line">➜  <span class="constant">Desktop </span> gradle dist test</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"><span class="symbol">:test</span></span><br><span class="line">running unit tests</span><br><span class="line"><span class="symbol">:dist</span></span><br><span class="line">building the distribution</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">1.768</span> secs</span><br></pre></td></tr></table></figure>
<h2 id="4-2执行任务">4.2执行任务</h2><p>你能通过使用-x 命令来排除某些任务的执行，我们来使用之前的脚本来演示</p>
<p>例4.2 执行任务<br>gradle dist -x test的输出</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle dist -x test</span><br><span class="line">:compile</span><br><span class="line">compiling source</span><br><span class="line">:dist</span><br><span class="line">building <span class="operator">the</span> distribution</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total <span class="built_in">time</span>: <span class="number">1</span> <span class="built_in">secs</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xqtsx.com1.z0.glb.clouddn.com/commandLineTutorialTasks.png" alt=""></p>
<p><code>官方演示图错了，test不是指向complie，而是complie指向test</code></p>
<p>从这个示例的输出,可以看到test任务没有执行,即使这是一个dist的依赖任务。你还会注意到依赖于test的任务中,compileTest没有执行。但是test依赖的另一个任务,如complie,仍会被执行。</p>
<h2 id="4-3如何在构建失败的时候继续构建">4.3如何在构建失败的时候继续构建</h2><p>默认情况下，gradle将会在任何任务失败时中止执行。这使得构建更快地完成，但隐藏了其他错误。为了在一个单一的构建尽可能多的发现可能失败的任务，你可以使用—continue选项。</p>
<p>当—continue执行，gradle将执行每项任务，而不是只要遇到第一个故障就停止。遇到的每一个故障将在构建结束时报告。</p>
<p>如果一个任务失败，依赖于它的任何后续任务将不会被执行，因为这样做是不安全的。例如，如果complie的代码发生错误，test就不会被执行，因为test任务依赖于complie任务（直接或间接地） 。</p>
<h2 id="4-4_任务名缩写">4.4 任务名缩写</h2><p>当你命令行指定任务时，不需要提供全名，只要能足够辨认出该任务，在上面同样的脚本中，我们会通过执行<code>gradle -d</code>来执行dist任务</p>
<p>Example 4.3. Abbreviated task name</p>
<p>Output of gradle di</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle di</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"><span class="symbol">:test</span></span><br><span class="line">running unit tests</span><br><span class="line"><span class="symbol">:dist</span></span><br><span class="line">building the distribution</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">1</span> secs</span><br></pre></td></tr></table></figure>
<p>你也可以缩写驼峰命名的每个词，例如，可以通过<code>gradle compTest</code>甚至<code>gradle cT</code>来执行 compileTest 任务</p>
<p>Example 4.4. Abbreviated camel case task name<br>Output of gradle cT</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle cT</span><br><span class="line"><span class="symbol">:compile</span></span><br><span class="line">compiling source</span><br><span class="line"><span class="symbol">:compileTest</span></span><br><span class="line">compiling unit tests</span><br><span class="line"></span><br><span class="line"><span class="constant">BUILD SUCCESSFUL</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Total </span><span class="symbol">time:</span> <span class="number">1</span> secs</span><br></pre></td></tr></table></figure>
<p>在使用缩写的同时也可以使用 －x 命令</p>
<h2 id="4-5选择执行的脚本">4.5选择执行的脚本</h2><p>当运行gradle命令时，会从当前路径查找脚本文件，你也可以使用 －b 命令来选择其他文件，如果使用－b命令，setting.gradle 文件就不会被使用，例如：</p>
<p>Example 4.5. Selecting the project using a build file</p>
<p>subdir/myproject.gradle</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">task</span> hello &lt;&lt; &#123;</span><br><span class="line">    <span class="title">println</span> <span class="string">"using build file '<span class="variable">$buildFile</span>.name' in '<span class="variable">$buildFile</span>.parentFile.name'."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output of gradle -q -b subdir/myproject.gradle hello</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -<span class="tag">q</span> -<span class="tag">b</span> subdir/myproject<span class="class">.gradle</span> hello</span><br><span class="line">using build file <span class="string">'myproject.gradle'</span> <span class="keyword">in</span> <span class="string">'subdir'</span>.</span><br></pre></td></tr></table></figure>
<p>或者，你可以使用 －p 命令来指定文件路径，多个工程中，你应该使用－p命令 而不是 －b 命令</p>
<p>Example 4.6. Selecting the project using project directory</p>
<p>Output of gradle -q -p subdir hello</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -<span class="tag">q</span> -<span class="tag">p</span> subdir hello</span><br><span class="line">using build file <span class="string">'build.gradle'</span> <span class="keyword">in</span> <span class="string">'subdir'</span>.</span><br></pre></td></tr></table></figure>
<h2 id="4-6获得构建信息">4.6获得构建信息</h2>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="4-通过命令行使用gradle">4.通过命令行使用gradle</h1><p>这张将介绍使用gradle命令行的基础知识，就像你在前几章看到的那样</p>
<h2 id="4-1_执行多重任务">4.1 执行多重任务</h2><p>你能使用命令通过一个脚本来执行]]>
    </summary>
    
      <category term="Gradle" scheme="http://mzeht.com/tags/Gradle/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle User Guide]]></title>
    <link href="http://mzeht.com/2016/02/06/Gradle-User-Guide/"/>
    <id>http://mzeht.com/2016/02/06/Gradle-User-Guide/</id>
    <published>2016-02-06T15:19:45.000Z</published>
    <updated>2016-02-09T17:24:30.000Z</updated>
    <content type="html"><![CDATA[<p>参考资料：gradle 2.11 官方文档<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/userguide.html</a></p>
<p>Gradle User Guide<br>Version 2.10</p>
<p>Copyright © 2007-2015 Hans Dockter, Adam Murdoch<br>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p>
<h1 id="第一章：关于gradle">第一章：关于gradle</h1><h2 id="1-介绍">1.介绍</h2><p>很高兴能向大家介绍 Gradle, 这是一个构建系统, 我们认为它是 java ( JVM ) 世界中构建技术的一个飞跃.<br>Gradle 提供了:</p>
<ul>
<li>一个像 Ant 一样的非常灵活的通用构建工具</li>
<li>一种可切换的, 像 maven 一样的基于合约构建的框架</li>
<li>支持强大的多工程构建</li>
<li>支持强大的依赖管理(基于 ApacheIvy )</li>
<li>很好的支持你已有的 maven 和 ivy 仓库</li>
<li>支持传递性依赖管理, 而不需要远程仓库或者 pom.xml 或者 ivy 配置文件</li>
<li>优先支持 Ant 式的任务和构建</li>
<li>基于 <code>groovy</code> 的构建脚本</li>
<li>有丰富的领域模型来描述你的构建</li>
</ul>
<h3 id="1-1-_关于用户指南">1.1. 关于用户指南</h3><p>这份用户指南，就像Gradle自身一样，还在积极的发展之中，Gradle的一些功能没有被完全展示出来，现在的一些内容也不是很清晰，如果你更加了解Gradle，我们需要你的帮助来完善Gradle文档，你可以在<a href="http://www.gradle.org/contribute" target="_blank" rel="external">Gradle Web Site</a>了解如何为文档贡献力量</p>
<p>通过这本指南, 你将会看到一些代表 Gradle 任务之间依赖关系的图表. 类似于 UML 依赖关系<br>的表示方法, 从一个任务 A 指向另一个任务 B 的箭头代表A依赖于B.</p>
<h2 id="2-概述">2.概述</h2><h3 id="2-1-_特点">2.1. 特点</h3><ol>
<li><p><code>声明式构建和合约构建</code><br>Gradle 的核心是基于 Groovy 的 领域特定语言 (DSL), 具有十分优秀的扩展性. Gradle 通过提<br>供可以随意集成的声明式语言元素将声明性构建推到了一个新的高度. 这些元素也为 Java,<br>Groovy, OSGi, Web 和Scala 等项目提供基于合约构建的支持. 而且, 这种声明式语言是可扩展<br>的. 你可以添加自己的语言元素或加强现有的语言元素, 从而提供简洁, 易于维护和易于理解的<br>构建.</p>
</li>
<li><p><code>基于依赖的编程语言</code>声明式语言位于通用任务图 ( general purpose task graph ) 的顶端，它可以被充分利用在你<br>的构建中. 它具有强大的灵活性, 可以满足使用者对 Gradle 的一些特别的需求.</p>
</li>
<li><code>让构建结构化</code><br>Gradle 的易适应性和丰富性可让你在构建里直接套用通用的设计原则. 例如, 你可以非常容易<br>地使用一些可重用的组件来构成你的构建. 但是不必要的间接内联内容是不合适的. 不要强行<br>拆分已经结合在一起的部分 (例如, 在你的项目层次结构中). 避免使构建难以维护. 总之, 你可<br>以创建一个结构良好，易于维护和易于理解的构建.</li>
<li><code>API深化</code><br>你会非常乐意在整个构建执行的生命周期中使用 Gradle, 因为Gradle 允许你管理和定制它的<br>配置和执行行为.</li>
<li><code>Gradle 扩展</code><br>Gradle 扩展得非常好. 不管是简单的独立项目还是大型的多项目构建, 它都能显著的提高效率.<br>这是真正的结构构建. 顶尖水平的构建功能，还可以解决许多大公司碰到的构建 性能低下的问<br>题.</li>
<li><code>多项目构建</code><br>Gradle 对多项目的支持是非常出色的. 项目依赖是很重要的部分. 它允许你模拟在多项目构建<br>中项目的关系，这正是你所要关注的地方. Gradle 遵从你的布局, 反过来就不是.<br>Gradle 提供了局部构建的功能. 如果你构建一个单独的子项目, Gradle 会构建这个子项目依赖<br>的所有子项目. 你也可以选择依赖于另一个特别的子项目重新构建这些子项目. 这样在一些大<br>型项目里就可以节省非常多的时间.</li>
<li><code>多种方式来管理你的依赖</code><br>不同的团队有不同的管理外部依赖的方法. Gradle 对于任何管理策略都提供了合适的支持. 从<br>远程 Maven 和 Ivy 库的依赖管理到本地文件系统的 jars 或者 dirs.</li>
<li><code>Gradle 是第一个构建整合工具</code><br>Ant 的 tasks是 Gradle 中很重要的部分, 更有趣是 Ant 的 projects 也是十分重要的部分.<br>Gradle 可以直接引入Ant 项目, 并在运行时直接将 Ant targets 转换成 Gradle tasks. 你可以从<br>Gradle 中依赖它们, 并增强它们的功能, 甚至可以在 build.xml 文件中声明 Gradle tasks 的依<br>赖. 并且properties, paths 等也可以通过同样的方法集成进来.<br>Gradle 完全支持你已有的 Maven 或者 lvy 仓库来构造发布或者提取依赖. Gradle 也提供了一<br>个转化器, 用来将 maven 的 pom.xml 文件转换成 Gradle 脚本. 在运行时引入 Maven 项目也<br>会在稍后推出.</li>
<li><code>易于迁移</code><br>Gradle 可以兼容任何结构. 因此你可以直接在你的产品构建的分支上开发你的 Gradle 构建,<br>并且二者可以并行. 我们通常建议编写一些测试代码来确保它们的功能是相同的. 通过这种方<br>式, 在迁移的时候就不会显得那么混乱和不可靠, 这是通过婴儿学步的方式来获得最佳的实践.</li>
<li><code>Groovy</code><br>Gradle 的构建脚本是通过 Groovy 编写的而不是 XML. 但是并不像其他方式, 这并不是为了简<br>单的展示用动态语言编写的原始脚本有多么强大. 不然的话, 只会导致维护构建变得非常困难.<br>Gradle 的整个设计是朝着一种语言的方向开发的, 并不是一种死板的框架. Groovy 就像胶水一<br>样, 把你像实现的构想和抽象的 Gradle 粘在一起. Gradle提供了一些标准的构想, 但是他们并<br>不享有任何形式的特权. 相比于其他声明式构建系统，对我们来说这是一个比较突出的特点.</li>
<li><code>Gradle 包装器</code><br>Gradle 包装器允许你在没有安装 Gradle 的机器上运行 Gradle 构建. 在一些持续集成的服务<br>器上, 这个功能将非常有用. 它同样也能降低使用一个开源项目的门槛, 也就是说构建它将会非<br>常简单. 这个包装器对于公司来说也是很有吸引力的. 它并不需要为客户机提供相应的管理防<br>范. 这种方式同样也能强制某一个版本 Gradle 的使用从而最小化某些支持问题.</li>
<li><code>免费和开源</code><br>Gradle 是一个开源项目, 遵循 ASL 许可.</li>
</ol>
<h3 id="2-2-_为什么选择Groovy">2.2. 为什么选择Groovy</h3><p>我们认为在构建脚本时，使用内部DSL［DSL：Domain Specific Languages,特定领域语言］(基于动态语言)，和XML相比，有很大优势，DSL有很多，为什么选择了Gradle？答案就在Gradle的使用背景中，虽然Gradle是通用的核心构建工具，但是主要运用在java项目上，在这些项目中，团队成员非常熟悉java，我们认为构建应该对团队全体成员尽量清晰明了</p>
<p>在这种情况下，你可能争论为什么不直接用java作为脚本构建语言，这的确是个合理的疑问，对于你的团队来说，java拥有最好的清晰度和最低的学习成本，但是由于java语言的限制，java作为脚本构建语言，并不是那么强大和出色[^hello].像Python，Groovy和Ruby这些语言表现更好，我们选择了Groovy，他最适合java开发人员，他的基本语法，类系统，包结构和其他一些特征，都和java相同，在和java的共同基础上，Groovy能做的更多.</p>
<p>对于熟悉Ruby,Python或者有志于学习它们的java开发者，以上依据都不成立了，Gradle的设计同时也适合用Ruby，Python来设计脚本构建引擎，只是现在不是我们的当务之急，我们乐于支持任何团体来开发更多的脚本构建引擎.</p>
<p>[^hello]: 在 <a href="http://www.defmacro.org/ramblings/lisp.html" target="_blank" rel="external">http://www.defmacro.org/ramblings/lisp.html</a> 你可以看到一篇比较Ant，XML，Java和Lisp的有趣文章， 如果java的语法和Groovy的语法一样的话，那将非常有趣</p>
<h1 id="使用现有的构建">使用现有的构建</h1><h2 id="3-安装Gradle">3.安装Gradle</h2><h3 id="3-1前提">3.1前提</h3><p>Gradle 需要安装一个 Java JDK 或者 JRE. 而且 Java 版本必须至少是 6 以上. (to check, use java -version). Gradle 有自带 Groovy 库, 所以没必要安装 Groovy. 任何已经安装的 Groovy 会被 Gradle 忽略.</p>
<p>Gradle 使用任何已经存在在你的路径中的 JDK (可以通过 java -version 检查, 如果有就说明系统已经安装了 Java 环境). 或者, 你也可以设置 JAVA_HOME 环境参数来指定希望使用的JDK的安装目录.</p>
<h3 id="3-2_下载">3.2 下载</h3><p>You can download one of the Gradle distributions from the <a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle web site</a>.</p>
<h3 id="3-3_解压">3.3 解压</h3><p>The Gradle distribution comes packaged as a ZIP. The full distribution contains:</p>
<ul>
<li>The Gradle binaries.</li>
<li>The user guide (HTML and PDF).</li>
<li>The DSL reference guide.</li>
<li>The API documentation (Javadoc and Groovydoc).</li>
<li>Extensive samples, including the examples referenced in the user guide, along with some complete and more complex builds you can use as a starting point for your own build.</li>
<li>The binary sources. This is for reference only. If you want to build Gradle you need to download the source distribution or checkout the sources from the source repository. See the<a href="http://gradle.org/development/" target="_blank" rel="external">Gradle web site</a> for details.</li>
</ul>
<h3 id="3-4_环境变量">3.4 环境变量</h3><p>For running Gradle, add GRADLE_HOME/bin to your PATH environment variable. Usually, this is sufficient to run Gradle.</p>
<h3 id="3-5_运行和测试安装">3.5 运行和测试安装</h3><p>ou run Gradle via the gradle command. To check if Gradle is properly installed just type gradle -v. The output shows the Gradle version and also the local environment configuration (Groovy, JVM version, OS, etc.). The displayed Gradle version should match the distribution you have downloaded.</p>
<h3 id="3-6_JVM_设置">3.6 JVM 设置</h3><p>JVM 选项可以通过设置环境变量来更改. 您可以使用 GRADLE_OPTS 或者 JAVA_OPTS.<br>JAVA_OPTS 是一个用于 JAVA 应用的环境变量. 一个典型的用例是在 JAVA_OPTS 里设置HTTP代理服务器(proxy),<br>GRADLE_OPTS 是内存选项. 这些变量可以在 gradle 的一开始就设置或者通过 gradlew 脚本来设置.</p>
<p>注意，目前Gradle不能通过命令行设置jvm.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考资料：gradle 2.11 官方文档<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradl]]>
    </summary>
    
      <category term="Gradle" scheme="http://mzeht.com/tags/Gradle/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 2.0 Preview 9]]></title>
    <link href="http://mzeht.com/2016/02/02/Android-Studio-2-0-Preview-9/"/>
    <id>http://mzeht.com/2016/02/02/Android-Studio-2-0-Preview-9/</id>
    <published>2016-02-02T10:40:59.000Z</published>
    <updated>2016-02-02T10:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>一不注意android studio preview 2.0 又要升级了，升级到preview2.0 9版本</p>
<p>下载地址<a href="http://tools.android.com/download/studio/builds/2-0-preview-9" target="_blank" rel="external">http://tools.android.com/download/studio/builds/2-0-preview-9</a><br>这里有最新的版本更新消息<br>之前的preview 2.0 的确有不可忽视的bug </p>
<blockquote>
<p>We’ve just pushed Android Studio 2.0 Preview 9 to the canary channel — along with 2.0.0-alpha9 of the Gradle plugin to jcenter (and as part of the bundled offline repository within the IDE).</p>
<p>In this release, we’ve completely turned off in-memory dexing by default. We’ve spent the last couple of previews trying to fine-tune it, but there are lingering issues which continues to affect users. This should hopefully make the builds work a lot better for many of you. (If things were already working well, you can continue with in-memory dexing by turning it on with android.dexOptions.dexInProcess=true.)</p>
</blockquote>
<p> <strong>We’ve also continued to fix various Instant Run scenarios; in particular, using APK splits on API 23 seems to trigger some platform bugs, so for now we’ve switched over to using multidex for coldswap for both Lollipop and Marshmallow.</strong></p>
<p>没错，果然是bug，就是打包出问题,个人经历为生成的apk fragment资源管理混乱，主题资源编译出错，同样的打包方式，viewpage切换一个出错一个正常，过渡动画一个默认，一个自定义，导致我用回了1.5稳定版，不知道这个版本彻底解决没，从preview 9 开始 默认使用gradle2.10版本</p>
<p>gradle的android构建插件为<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.0.0-alpha6'</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一不注意android studio preview 2.0 又要升级了，升级到preview2.0 9版本</p>
<p>下载地址<a href="http://tools.android.com/download/studio/builds/2-0-preview-9"]]>
    </summary>
    
      <category term="AndroidStudio" scheme="http://mzeht.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NavigationView+TabLayout+Viewpage]]></title>
    <link href="http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/"/>
    <id>http://mzeht.com/2016/02/01/NavigationView-TabLayout-Viewpage/</id>
    <published>2016-02-01T09:28:41.000Z</published>
    <updated>2016-02-02T09:36:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://github.com/mzeht/ZhiHuiYun" target="_blank" rel="external">https://github.com/mzeht/ZhiHuiYun</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="NavigationView配合TabLayout+Viewpage">NavigationView配合TabLayout+Viewpage</h2><p>fragment实现多页面切换，适合搭建框架.</p>
<p>Demo地址<a href="https://]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="NavigationView" scheme="http://mzeht.com/tags/NavigationView/"/>
    
      <category term="TabLyout" scheme="http://mzeht.com/tags/TabLyout/"/>
    
      <category term="ViewPage" scheme="http://mzeht.com/tags/ViewPage/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SwipeRefreshLayoutBasic]]></title>
    <link href="http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/"/>
    <id>http://mzeht.com/2016/01/30/SwipeRefreshLayoutBasic/</id>
    <published>2016-01-29T16:20:12.000Z</published>
    <updated>2016-02-02T09:21:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/sample.gif" alt="image"></p>
<p><img src="https://github.com/mzeht/SwipeRefreshListDemo/blob/master/app/src/main/res/acess/click.gif" alt="image"></p>
<p>SwipeRefreshLayout是google官方的刷新控件<br>Recyclerview则是未来取代listview，girdview等的新控件</p>
<p>.IDE android studio 1.5(2.o preview之前apk打包有bug，暂时不用了)</p>
<p>.Demo地址 <a href="https://github.com/mzeht/SwipeRefreshListDemo" target="_blank" rel="external">https://github.com/mzeht/SwipeRefreshListDemo</a> </p>
<h2 id="-MainActivity">.MainActivity</h2><p>activity_main.xml</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;android.support.design.widget.CoordinatorLayout
xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span>
xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span>
tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>&gt;

&lt;android.support.design.widget.AppBarLayout
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">theme=</span><span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;

    &lt;android.support.v7.widget.Toolbar
        android:<span class="variable">id=</span><span class="string">"@+id/toolbar"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"?attr/actionBarSize"</span>
        android:<span class="variable">background=</span><span class="string">"?attr/colorPrimary"</span>
        app:<span class="variable">popupTheme=</span><span class="string">"@style/AppTheme.PopupOverlay"</span>/&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;

&lt;include <span class="variable">layout=</span><span class="string">"@layout/content_main"</span>/&gt;

&lt;android.support.design.widget.FloatingActionButton
    android:<span class="variable">id=</span><span class="string">"@+id/fab"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_gravity=</span><span class="string">"bottom|end"</span>
    android:<span class="variable">layout_margin=</span><span class="string">"@dimen/fab_margin"</span>
    android:<span class="variable">src=</span><span class="string">"@android:drawable/ic_dialog_email"</span>/&gt;

&lt;/android.support.design.widget.CoordinatorLayout&gt;
</code></pre><h2 id="-在其中的content_main-xml">.在其中的content_main.xml</h2><p>SwipeRefreshLayout 嵌套一个子元素 （如有多个，可用FrameLayout封装成一个）</p>
<pre><code>    &lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;RelativeLayout
        xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
    xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-    auto"</span>
    xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    app:<span class="variable">layout_behavior=</span><span class="string">"@string/    appbar_scrolling_view_behavior"</span>
    tools:<span class="variable">context=</span><span class="string">"com.example.mzeht.swiperefreshlistdemo.MainActivity"</span>
    tools:<span class="variable">showIn=</span><span class="string">"@layout/activity_main"</span>&gt;

&lt;android.support.v4.widget.SwipeRefreshLayout
    android:<span class="variable">id=</span><span class="string">"@+id/swiperefresh"</span>
    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;android.support.v7.widget.RecyclerView
        android:<span class="variable">id=</span><span class="string">"@+id/recycler"</span>
        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
        android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;
    &lt;/android.support.v7.widget.RecyclerView&gt;
&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre><h2 id="-RecyclerView的Item">.RecyclerView的Item</h2><p>*同经典的listviewItem，只是adapter略有区别</p>
<pre><code>&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;
&lt;LinearLayout xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span>
          xmlns:<span class="variable">tools=</span><span class="string">"http://schemas.android.com/tools"</span>
          android:<span class="variable">orientation=</span><span class="string">"horizontal"</span>
          android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span>
          android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
android:<span class="variable">id=</span><span class="string">"@+id/ll"</span>&gt;

&lt;ImageView
    android:<span class="variable">id=</span><span class="string">"@+id/image"</span>
    android:<span class="variable">src=</span><span class="string">"@mipmap/ic_launcher"</span>
    android:<span class="variable">padding=</span><span class="string">"5dp"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    /&gt;
&lt;TextView
    android:<span class="variable">id=</span><span class="string">"@+id/tv"</span>
    android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span>
    android:<span class="variable">textSize=</span><span class="string">"18sp"</span>
    android:<span class="variable">gravity=</span><span class="string">"center"</span>
    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>
    android:<span class="variable">focusable=</span><span class="string">"false"</span>
    tools:<span class="variable">text=</span><span class="string">"ss"</span>/&gt;

&lt;/LinearLayout&gt;
</code></pre><h2 id="-RecyclerView的分割线">.RecyclerView的分割线</h2><p>*RecyclerView 默认没有分割线，需要自定义一个，希望以后有默认可选，这里定义一个</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>{
<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = {android.R.attr.listDivider};
<span class="keyword">private</span> Drawable mDivider;
<span class="function"><span class="keyword">public</span> <span class="title">MyItemDecoration</span><span class="params">(Context context)</span>
</span>{
    TypedArray array = context.obtainStyledAttributes(ATTRS);
    <span class="comment">// 获取分隔条</span>
    mDivider = array.getDrawable(<span class="number">0</span>);
    array.recycle();
}
<span class="annotation">@Override</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span>
</span>{
    <span class="keyword">super</span>.onDrawOver(c, parent, state);
    <span class="keyword">int</span> count = parent.getChildCount();
    <span class="keyword">int</span> left = parent.getPaddingLeft();
    <span class="keyword">int</span> right = parent.getWidth()-parent.getPaddingRight();
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
    {
        View v = parent.getChildAt(i);
        RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) v.getLayoutParams();
        <span class="keyword">int</span> top = v.getBottom() + params.bottomMargin;
        <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();
        mDivider.setBounds(left,top,right,bottom);
        mDivider.draw(c);
    }
}

}
</code></pre><p>*MainActivity</p>
<pre><code>mRecyclerView= (RecyclerView) findViewById(R.id.recycler);
mRefreshlayout= (SwipeRefreshLayout) findViewById(R.id.swiperefresh);
mLinearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);
mAdapter = <span class="keyword">new</span> MainRecyclerAdapter(DataSource.generateData(<span class="number">20</span>),MainActivity.<span class="keyword">this</span>);
mRecyclerView.setAdapter(mAdapter);

<span class="comment">//每个item高度一致，可设置为true，提高性能</span>
mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);
mRecyclerView.setLayoutManager(mLinearLayoutManager);
<span class="comment">//分隔线</span>
mRecyclerView.addItemDecoration(<span class="keyword">new</span> MyItemDecoration(<span class="keyword">this</span>));
mRefreshlayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{

        <span class="keyword">new</span> UpdateTask().execute();

    }
});
</code></pre><p>   *开启异步任务模拟耗时操作</p>
<pre><code>   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AsyncTask&lt;Void</span>,<span class="title">Void</span>,<span class="title">List&lt;String&gt;&gt;</span>
</span>{
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; doInBackground(<span class="type">Void</span>... params)
    {
        <span class="keyword">try</span>
        {
            <span class="type">Thread</span>.sleep(<span class="number">2000</span>);
        } <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e)
        {
            e.printStackTrace();
        }
        <span class="type">List</span>&lt;<span class="type">String</span>&gt; strings = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();
        strings.add(<span class="string">"新数据1"</span>);
        strings.add(<span class="string">"新数据2"</span>);
        strings.add(<span class="string">"新数据3"</span>);
        strings.add(<span class="string">"新数据4"</span>);
        <span class="keyword">return</span> strings;
    }
    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> void onPostExecute(<span class="type">List</span>&lt;<span class="type">String</span>&gt; strings)
    {
        mAdapter.addItems(strings);
        <span class="comment">//通知刷新完毕</span>
        mRefreshlayout.setRefreshing(<span class="literal">false</span>);
        <span class="comment">//滚动到列首部---&gt;这是一个很方便的api，可以滑动到指定位置</span>
        mRecyclerView.scrollToPosition(<span class="number">0</span>);
    }
}
</code></pre><h2 id="RecylerView的Item点击事件监听，内部各个子控件的监听">RecylerView的Item点击事件监听，内部各个子控件的监听</h2><pre><code>*在设计复杂listview 的时候，往往有Item点击事件和各个子控件的事件需要监听
*但是RecylerView没有提供OnItemOnclick的方法，需要我们自己去写
首先定义一个外部接口

```java

<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OnListClickListener</span> {

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View view,String data)</span></span>;


    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemTextClick</span><span class="params">(View view,String data)</span></span>;



    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemIconClick</span><span class="params">(View view ,String data)</span></span>;
}
</code></pre><p>*适配Adapter</p>
<p>public class MainRecyclerAdapter extends RecyclerView.Adapter<mainrecycleradapter.viewholder> {</mainrecycleradapter.viewholder></p>
<pre><code><span class="keyword">private</span> List&lt;String&gt; datas = <span class="keyword">null</span>;
<span class="keyword">private</span> OnListClickListener mListener;

<span class="function"><span class="keyword">public</span> <span class="title">MainRecyclerAdapter</span><span class="params">(List&lt;String&gt; datas,OnListClickListener l)</span>
</span>{
    <span class="keyword">this</span>.datas = datas;
    <span class="keyword">this</span>.mListener=l;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span>
</span>{
    <span class="keyword">final</span> View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item, parent, <span class="keyword">false</span>);
<span class="comment">//        itemView.setOnClickListener(new View.OnClickListener()</span>
<span class="comment">//        {</span>
<span class="comment">//            @Override</span>
<span class="comment">//            public void onClick(View v)</span>
<span class="comment">//            {</span>
<span class="comment">//                if(mListener != null)</span>
<span class="comment">//                {</span>
<span class="comment">//                    mListener.OnItemClick(v, (String) itemView.getTag());</span>
<span class="comment">//                }</span>
<span class="comment">//            }</span>
<span class="comment">//        });</span>
    ViewHolder viewHolder= <span class="keyword">new</span> ViewHolder(itemView);




    <span class="keyword">return</span> viewHolder;
}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span>
</span>{
    String s = datas.get(position);
    holder.bindData(s);
    holder.itemView.setTag(s);
    holder.mContent.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemTextClick(holder.mContent, (String) holder.itemView.getTag());
        }
    });

    holder.mImageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemIconClick(holder.mImageView, (String) holder.itemView.getTag());
        }
    });

    holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
            mListener.OnItemClick(v, (String) holder.itemView.getTag());
        }
    });


}
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span>
</span>{
    <span class="function"><span class="keyword">return</span> datas.<span class="title">size</span><span class="params">()</span></span>;
}
<span class="javadoc">/**
 * 批量增加
 * */</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addItems</span><span class="params">(List&lt;String&gt; items)</span>
</span>{
    <span class="keyword">if</span> (items == <span class="keyword">null</span>)
        <span class="keyword">return</span>;
    <span class="keyword">this</span>.datas.addAll(<span class="number">0</span>, items);
    <span class="keyword">this</span>.notifyItemRangeInserted(<span class="number">0</span>, items.size());
}

<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>
</span>{
    <span class="keyword">private</span> TextView mContent;
    <span class="keyword">private</span> ImageView mImageView;
    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span>
    </span>{
        <span class="keyword">super</span>(itemView);
        mContent = (TextView) itemView.findViewById(R.id.tv);
        mImageView= (ImageView) itemView.findViewById(R.id.image);
    }
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">bindData</span><span class="params">(String s)</span>
    </span>{
        <span class="keyword">if</span> (s != <span class="keyword">null</span>)
            mContent.setText(s);
    }

}
}
</code></pre><p>*通过对Item的根试图的监听，实现Item点击监听，不用设置最外层布局id，可以看出，Recyclerview强制对listview进行复用，对子控件的个性化定制在bind操作中进行，接口事件传递到Activity层，可以通过TAG传递数据，解耦合，如：</p>
<pre><code> @<span class="type">Override</span>
    public void <span class="type">OnItemClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="type">Item</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemTextClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">text</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>

@<span class="type">Override</span>
<span class="title">public</span> void <span class="type">OnItemIconClick</span>(<span class="type">View</span> view, <span class="type">String</span> <span class="typedef"><span class="keyword">data</span>) <span class="container">{
    <span class="type">Toast</span>.<span class="title">makeText</span>(<span class="type">MainActivity</span>.<span class="title">this</span>, "来自<span class="title">icon</span>的点击事件:" + <span class="title">data</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).<span class="title">show</span>();

}</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SwipeRefreshLayout配合Recyclerview实现下拉刷新列表">SwipeRefreshLayout配合Recyclerview实现下拉刷新列表</h1><p><img src="https://github.com/mzeht/SwipeRe]]>
    </summary>
    
      <category term="Android" scheme="http://mzeht.com/tags/Android/"/>
    
      <category term="Matertal Design" scheme="http://mzeht.com/tags/Matertal-Design/"/>
    
      <category term="代码" scheme="http://mzeht.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://mzeht.com/2015/06/02/hello-world/"/>
    <id>http://mzeht.com/2015/06/02/hello-world/</id>
    <published>2015-06-02T04:30:10.000Z</published>
    <updated>2016-02-06T17:02:00.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="86" src="http://music.163.com/outchain/player?type=2&id=247529&auto=0&height=66"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown 语法]]></title>
    <link href="http://mzeht.com/2015/03/10/2015-03-10-markdown/"/>
    <id>http://mzeht.com/2015/03/10/2015-03-10-markdown/</id>
    <published>2015-03-09T16:00:00.000Z</published>
    <updated>2015-04-01T16:09:54.000Z</updated>
    <content type="html"><![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span class="preprocessor">## Title2</span>
<span class="preprocessor">### Title3</span>
<span class="preprocessor">#### Title4</span>
<span class="preprocessor">##### Title5</span>
<span class="preprocessor">###### Title6</span>
</code></pre><p>效果：</p>
<h1 id="Title1">Title1</h1><h2 id="Title2">Title2</h2><h3 id="Title3">Title3</h3><h4 id="Title4">Title4</h4><h5 id="Title5">Title5</h5><h6 id="Title6">Title6</h6><h1 id="2-_引用">2. 引用</h1><p>代码：</p>
<pre><code><span class="blockquote">&gt; Reference1</span>
<span class="blockquote">&gt; &gt; Reference2</span>
<span class="blockquote">&gt; &gt; &gt; Reference3</span>
</code></pre><p>效果：</p>
<blockquote>
<p>Reference1</p>
<blockquote>
<p>Reference2</p>
<blockquote>
<p>Reference3</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="3-_列表">3. 列表</h1><p>代码：</p>
<pre><code><span class="bullet">+ </span>Row1
<span class="bullet">- </span>Row2
<span class="bullet">* </span>Row3
<span class="bullet">1. </span>Row4
<span class="bullet">2. </span>Row5
</code></pre><p>效果：</p>
<ul>
<li>Row1</li>
</ul>
<ul>
<li>Row2</li>
</ul>
<ul>
<li>Row3</li>
</ul>
<ol>
<li>Row4</li>
<li>Row5</li>
</ol>
<h1 id="4-_代码">4. 代码</h1><p>代码：</p>
<pre><code><span class="escape">`C</span>ode1<span class="escape">`
</span>
    Code2
</code></pre><p>效果：</p>
<p><code>Code1</code></p>
<pre><code>Code2
</code></pre><h1 id="5-_链接与图片">5. 链接与图片</h1><p>代码：</p>
<pre><code>[<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbs.weiphone.com "威锋网"</span>)

[<span class="link_label">WPER</span>][<span class="link_reference">ref</span>]
[<span class="link_reference">ref</span>]:<span class="link_url"> http://bbs.wper.com (威智网)</span>

![<span class="link_label">WeiPhone</span>](<span class="link_url">http://bbsimages.weiphone.com/images/weiphone/logo.png "威锋论坛"</span>)

![<span class="link_label">WPER</span>][<span class="link_reference">pic</span>]
[<span class="link_reference">pic</span>]:<span class="link_url"> http://bbs.wper.com/static/image/wper/logo.png "威智网"</span>

<span class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://bbsimages.weiphone.com/images/weiphone/logo.png"</span> <span class="attribute">alt</span>=<span class="value">"BBS"</span> <span class="attribute">title</span>=<span class="value">"威锋网"</span> <span class="attribute">width</span>=<span class="value">"200"</span>/ &gt;</span></span>
</code></pre><p>效果：</p>
<p><a href="http://bbs.weiphone.com" title="威锋网" target="_blank" rel="external">WeiPhone</a></p>
<p><a href="http://bbs.wper.com" title="锋科技" target="_blank" rel="external">WPER</a></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋论坛"></p>
<p><img src="http://bbs.wper.com/static/image/wper/logo.png" alt="WPER" title="威智网"></p>
<p><img src="http://bbsimages.weiphone.com/images/weiphone/logo.png" alt="WeiPhone" title="威锋网" width="200"></p>
<h1 id="6-_强调">6. 强调</h1><p>代码：</p>
<pre><code><span class="keyword">*</span>MarkDown<span class="keyword">*</span>
_MarkDown_
<span class="keyword">*</span><span class="keyword">*</span>MarkDown<span class="keyword">*</span><span class="keyword">*</span>
__MarkDown__
</code></pre><p>效果：</p>
<p><em>MarkDown</em><br><em>MarkDown</em><br><strong>MarkDown</strong><br><strong>MarkDown</strong></p>
<h1 id="7-_转义字符">7. 转义字符</h1><p>代码：</p>
<pre><code><span class="string">\\</span> <span class="string">\`</span> <span class="string">\*</span> <span class="string">\_</span> <span class="string">\{</span> <span class="string">\}</span> <span class="string">\[</span> <span class="string">\]</span> <span class="string">\(</span> <span class="string">\)</span> <span class="string">\#</span> <span class="string">\+</span> <span class="string">\-</span> <span class="string">\.</span> <span class="string">\!</span>
</code></pre><p>效果：</p>
<p>\ ` * _ { } [ ] ( ) # + - . !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown是一种转化文本的轻量级工具，兼顾可读性和易用性。</p>
<h1 id="1-_标题">1. 标题</h1><p>代码：</p>
<pre><code><span class="preprocessor"># Title1</span>
<span clas]]>
    </summary>
    
      <category term="markdown" scheme="http://mzeht.com/tags/markdown/"/>
    
      <category term="文档" scheme="http://mzeht.com/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>